<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Quote_Cloud" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BackOfficePerson" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">30</stringProp>
        <stringProp name="ThreadGroup.ramp_time">200</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load QuoteOverViewPage" enabled="true"/>
        <hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Load QuoteOverViewPage" enabled="true">
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} Load QuoteOverViewPage Seq1 QuoteQL1 " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;query { roles { all { id name members { id } claims { claimType: type claimValue: value } } } } &quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} Load QuoteOverViewPage Seq1 Status " enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/resources/Quote/Status</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} Load QuoteOverViewPage Seq2 QuoteQL2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetLicense&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query GetLicense {\n  license {\n    demo\n    invalid\n    violated\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} Load QuoteOverViewPage Seq3 QuoteQL3" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;query search ( $expressions: ExpressionsInput, $paging: PageInput!, $orderBy: [OrderByInput], $priceLineStepIds: [String!] ) { quotes { groupedRevisions ( paging: $paging orderBy:$orderBy expressions:$expressions ) { ...documentRevisionGroupWithPriceCalculation } } } fragment documentRevisionGroupWithPriceCalculation on DocumentRevisionGroupsPayload { pageInfo { totalCount } items { ...documentRevisionGroupItemWithPriceCalculation } } fragment documentRevisionGroupItemWithPriceCalculation on DocumentRevisionsGroup { priceIsOutdated autoUpdatePrices currency totalNetValue ownerUserName owner { id name } documentId title status soldToCompanyName latestRevision archived quickRefs isProcessing erpDocumentIds crmOpportunityIds linesCount salesAreaName salesAreaId modifiedDate validTo expirationDate: validTo createdDate approvalStatus hasApprovalRuleSet revisions { hasSystemLines customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } archived erpDocumentId validTo expirationDate: validTo documentId revision ownerUserName owner { id name } status title quickRef createdDate modifiedDate createdBy creator { id name } modifiedBy modifier { id name } locked currency totalNetValue totalTaxValue autoUpdatePrices salesArea { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } id distributionChannel localCurrency name salesDivision salesOrganization currency } isProcessing processingStartedBy crmOpportunityId approvalStatus linesCount approvalBundle { bundleId requestedBy { name id } requesterComment locked status } language soldTo { partner { ...partnerItem } hierarchy { partnerRole companyName street zip city state countryCode accountGroup isSalesAreaDependent website phone fax externalId vatRegNo addressNumber integrationId parentId partnerId } } showPrices priceCalculation { priceLines(stepIds: $priceLineStepIds) { stepId id conditionValue } basePrice invalidMessage isValid netValue subTotal taxValue totalDiscount totalPrice unitBasePrice } } } fragment partnerItem on Partner { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } partnerRole defaultPartnerRoles companyName street zip city state countryCode accountGroup isSalesAreaDependent website phone fax externalId vatRegNo addressNumber integrationId parentId partnerId contactPerson { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } title firstName lastName email phone fax externalId personNumber } salesAreaData { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } salesOrganization distributionChannel salesDivision salesDistrict { text value } salesOffice salesGroup customerGroup currency priceGroup priceList shippingConditions plant incoTerms1 incoTerms2 paymentTerms customerPricingProcedure exchangeRateType relevantForRebate } }&quot;,&quot;variables&quot;:{&quot;paging&quot;:{&quot;page&quot;:0,&quot;perPage&quot;:50},&quot;orderBy&quot;:[{&quot;field&quot;:&quot;ModifiedDate&quot;,&quot;order&quot;:&quot;Descending&quot;}],&quot;expressions&quot;:{&quot;term&quot;:{&quot;field&quot;:&quot;Deleted&quot;,&quot;comparisonType&quot;:&quot;Equal&quot;,&quot;value&quot;:&quot;false&quot;},&quot;subExpressions&quot;:[{&quot;term&quot;:{&quot;field&quot;:&quot;OwnerUserName&quot;,&quot;comparisonType&quot;:&quot;Equal&quot;,&quot;value&quot;:&quot;7876890b-6cb0-d30c-f29d-40189ac600a4&quot;},&quot;subExpressions&quot;:null,&quot;operator&quot;:&quot;And&quot;}],&quot;operator&quot;:&quot;And&quot;},&quot;priceLineStepIds&quot;:[&quot;440.00&quot;,&quot;500.00&quot;,&quot;981.00&quot;,&quot;605.00&quot;,&quot;600.00&quot;,&quot;449.00&quot;,&quot;590.00&quot;,&quot;700.00&quot;]}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CreateQuote" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} CreateQuote Seq1 Quotations " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;title&quot;:&quot;BackOfficePersonaLoadTest${UserCounter}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/quotations/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">documentId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">version</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.version</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="CreateQuoteFromQuotesOverviewPage" enabled="true">
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} CreateQuote Seq2 templates " enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/templates/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} CreateQuote Seq2 featureModels " enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/featureModels/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} CreateQuote Seq2 QuoteQL1 " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;query&quot;: &quot;query ($querystring: String, $paging: PageInput!) { systems { systems(querystring: $querystring, paging: $paging) { items { id name productId productGroupId location description salesAreas image customRequestData { key valuePath } } pageInfo { count currentPage hasNextPage hasPreviousPage pageCount perPage totalCount } } } } &quot;,&#xd;
    &quot;variables&quot;: {&#xd;
        &quot;paging&quot;: {&#xd;
            &quot;page&quot;: 0,&#xd;
            &quot;perPage&quot;: 50&#xd;
        },&#xd;
        &quot;querystring&quot;: null&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} CreateQuote Seq2 QuoteQL2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;operationName&quot;: &quot;GetBreadcrumbsQuickRef&quot;,&#xd;
    &quot;query&quot;: &quot;query GetBreadcrumbsQuickRef($id: String!, $revision: Int!) {\n  quotes {\n    quote(documentVersion: {documentId: $id, revision: $revision}) {\n      id\n      quickRef\n      title\n      __typename\n    }\n    __typename\n  }\n}\n&quot;,&#xd;
    &quot;variables&quot;: {&#xd;
        &quot;id&quot;: &quot;${documentId}&quot;,&#xd;
        &quot;revision&quot;: 0&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} CreateQuote Seq2 /api/quotations/${documentId}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="revision" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">revision</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/quotations/${documentId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">QuotePayload</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.quote</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} CreateQuote Seq2 QuoteQL3" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;query&quot;: &quot;query getQuote( $documentVersion: DocumentVersionInput! ) { quotes { quote( documentVersion: $documentVersion ) { owner { id name } } } } &quot;,&#xd;
    &quot;variables&quot;: {&#xd;
        &quot;documentVersion&quot;: {&#xd;
            &quot;documentId&quot;: &quot;${documentId}&quot;,&#xd;
            &quot;revision&quot;: 0&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} CreateQuote Seq3 GetBomItemsEnvironmentInfo " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/material/GetBomItemsEnvironmentInfo</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} CreateQuote Seq4 getBomItemsStatusForConfiguration " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;environment&quot;:{&quot;rootEnvironment&quot;:{&quot;salesArea&quot;:{&quot;salesOrganization&quot;:&quot;NL01&quot;,&quot;distributionChannel&quot;:&quot;05&quot;},&quot;salesDocumentType&quot;:&quot;ZQU&quot;},&quot;materialEnvironment&quot;:[]},&quot;existingConfigurations&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/material/getBomItemsStatusForConfiguration</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="CreateQuoteFromQuotesOverviewPage" enabled="true">
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} CreateQuote Seq5 QuoteQL4 " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;query&quot;: &quot;query getApprovalConstraints($documentId: String!, $revision: Int!, $salesAreaId: String!) { approvals { approvalsEnabled: approvalsEnabled(salesAreaId: $salesAreaId) printingAllowed: isFeatureAllowed(documentVersion: {documentId: $documentId, revision: $revision}, feature: Printing), sapUploadAllowed: isFeatureAllowed(documentVersion: {documentId: $documentId, revision: $revision}, feature: SapUpload) } } &quot;,&#xd;
    &quot;variables&quot;: {&#xd;
        &quot;documentId&quot;: &quot;${documentId}&quot;,&#xd;
        &quot;revision&quot;: 0,&#xd;
        &quot;salesAreaId&quot;: &quot;NL01/05/01&quot;&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} CreateQuote Seq5 /api/output/csv/templates/ " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;SalesDocumentType&quot;:&quot;ZQU&quot;,&quot;SalesOrganization&quot;:&quot;NL01&quot;,&quot;SalesDistributionChannel&quot;:&quot;05&quot;,&quot;SalesDivision&quot;:&quot;01&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/output/csv/templates/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} CreateQuote Seq5 api/output/print/templates/" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;SalesDocumentType&quot;:&quot;ZQU&quot;,&quot;SalesOrganization&quot;:&quot;NL01&quot;,&quot;SalesDistributionChannel&quot;:&quot;05&quot;,&quot;SalesDivision&quot;:&quot;01&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/output/print/templates/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="OpenCustomerPage" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">5000</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="OpenCustomerPage" enabled="true">
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} OpenCustomerPage Seq1 QuoteQL1 " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;query countriesInWhichUserHaveAccess ($search: String, $salesAreaName: String, $partnerRole: String) { permissions { countryCode(filter: $search, salesAreaNameOrId: $salesAreaName, partnerRole: $partnerRole, paging: {page: 0, perPage: 50}) { hasMore items { value text } } } } &quot;,&quot;variables&quot;:{&quot;salesAreaName&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;partnerRole&quot;:&quot;AG&quot;}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} OpenCustomerPage Seq1 QuoteQL2 " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;query salesDistrictsInWhichUserHaveAccess ($search: String) { permissions { salesDistricts(filter: $search, paging: {page: 0, perPage: 50}) { hasMore items { value text } } } } &quot;,&quot;variables&quot;:{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} OpenCustomerPage Seq1 QuoteQL3 " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;query getPartnersList($filter: PartnerFilterInput!, $paging: PageInput) { partners { partners(filter:$filter, paging:$paging) { hasMore items{ ...partnerItem } } isCacheable } } fragment partnerItem on Partner { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } partnerRole defaultPartnerRoles companyName street zip city state countryCode accountGroup isSalesAreaDependent website phone fax externalId vatRegNo addressNumber integrationId parentId partnerId contactPerson { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } title firstName lastName email phone fax externalId personNumber } salesAreaData { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } salesOrganization distributionChannel salesDivision salesDistrict { text value } salesOffice salesGroup customerGroup currency priceGroup priceList shippingConditions plant incoTerms1 incoTerms2 paymentTerms customerPricingProcedure exchangeRateType relevantForRebate } }&quot;,&quot;variables&quot;:{&quot;filter&quot;:{&quot;salesArea&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;searchTerm&quot;:&quot;&quot;,&quot;partnerRole&quot;:&quot;AG&quot;},&quot;paging&quot;:{&quot;page&quot;:0,&quot;perPage&quot;:48}}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SearchCustomer" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter}  SearchCustomer" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;query&quot;: &quot;query getPartnersList($filter: PartnerFilterInput!, $paging: PageInput) { partners { partners(filter:$filter, paging:$paging) { hasMore items{ ...partnerItem } } isCacheable } } fragment partnerItem on Partner { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } partnerRole defaultPartnerRoles companyName street zip city state countryCode accountGroup isSalesAreaDependent website phone fax externalId vatRegNo addressNumber integrationId parentId partnerId contactPerson { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } title firstName lastName email phone fax externalId personNumber } salesAreaData { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } salesOrganization distributionChannel salesDivision salesDistrict { text value } salesOffice salesGroup customerGroup currency priceGroup priceList shippingConditions plant incoTerms1 incoTerms2 paymentTerms customerPricingProcedure exchangeRateType relevantForRebate } }&quot;,&#xd;
    &quot;variables&quot;: {&#xd;
        &quot;filter&quot;: {&#xd;
            &quot;partnerRole&quot;: &quot;AG&quot;,&#xd;
            &quot;salesArea&quot;: &quot;Signify the Netherlands - Projects&quot;,&#xd;
            &quot;searchTerm&quot;: &quot;31002737 &quot;&#xd;
        },&#xd;
        &quot;paging&quot;: {&#xd;
            &quot;page&quot;: 0,&#xd;
            &quot;perPage&quot;: 48&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="AddCustomer" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="AddCustomerFromCustomerPage" enabled="true"/>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">3000</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">1000</stringProp>
                <stringProp name="RandomTimer.range">100</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="AddCustomerFromCustomerPage" enabled="true">
              <boolProp name="PARENT_SAMPLE">false</boolProp>
              <intProp name="MAX_THREAD_NUMBER">6</intProp>
              <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
            </com.blazemeter.jmeter.controller.ParallelSampler>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} AddCustomer Seq1 GetPartnerChangeData" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;customerPricingProcedure&quot;: &quot;1&quot;,&#xd;
    &quot;materialLines&quot;: [&#xd;
    ],&#xd;
    &quot;salesArea&quot;: {&#xd;
        &quot;distributionChannel&quot;: &quot;05&quot;,&#xd;
        &quot;salesDivision&quot;: &quot;01&quot;,&#xd;
        &quot;salesOrganization&quot;: &quot;NL01&quot;&#xd;
    },&#xd;
    &quot;salesDocumentType&quot;: &quot;ZQU&quot;,&#xd;
    &quot;shipTo&quot;: &quot;31002737&quot;,&#xd;
    &quot;soldTo&quot;: &quot;31002737&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/partners/GetPartnerChangeData</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="AddCustomerFromCustomerPage" enabled="true">
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} AddCustomer Seq2 Quotation" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${AddCustomerRequest}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/quotations/</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.services.FileServer
log.info(&quot;result&quot;);
def payload = new File(&quot;C:/LoadScenarios_Payload/QA/AddCustomerRequestBody.json&quot;).getText();
def jsonSlurper = new JsonSlurper()
def object = jsonSlurper.parseText(vars.get(&quot;QuotePayload&quot;))
def customerObject= jsonSlurper.parseText(payload);
object.salesDistrict=&quot;NL0204&quot;;
object.salesOffice=&quot;NL70&quot;;
object.customerGroup=&quot;04&quot;;
object.priceGroup=&quot;04&quot;;
object.put(&quot;partners&quot;,customerObject.partners);
object.put(&quot;erpDocumentId&quot;,null);
object.put(&quot;isReadOnly&quot;,false);
object.soldTo=customerObject.soldTo;
object.shipTo=customerObject.shipTo;
object.payer=customerObject.payer;
object.billTo=customerObject.billTo;
def requestBody=new groovy.json.JsonBuilder(object).toPrettyString();
vars.put(&quot;AddCustomerRequest&quot;,requestBody);
vars.remove(&quot;QuotePayload&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                <stringProp name="FileSaver.filename">AddCustomerResponseData</stringProp>
                <boolProp name="FileSaver.errorsonly">false</boolProp>
                <boolProp name="FileSaver.successonly">true</boolProp>
                <boolProp name="FileSaver.skipsuffix">false</boolProp>
                <boolProp name="FileSaver.skipautonumber">false</boolProp>
                <stringProp name="FileSaver.variablename">AddCustomerResponseData</stringProp>
              </ResultSaver>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} AddCustomer Seq3 QuoteQL" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;query { quotes { quote(documentVersion: {documentId: \&quot;${documentId}\&quot;, revision: 0}) { versionEquals(version: \&quot;${version}\&quot; ) } } } &quot;,&quot;variables&quot;:{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} AddCustomer Seq4 DocumentId" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="revision" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">revision</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/quotations/${documentId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} AddCustomer Seq5 GetBomItemsEnvironmentInfo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/material/GetBomItemsEnvironmentInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} AddCustomer Seq6 getBomItemsStatusForConfiguration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;environment&quot;:{&quot;rootEnvironment&quot;:{&quot;salesArea&quot;:{&quot;salesOrganization&quot;:&quot;NL01&quot;,&quot;distributionChannel&quot;:&quot;05&quot;},&quot;salesDocumentType&quot;:&quot;ZQU&quot;},&quot;materialEnvironment&quot;:[]},&quot;existingConfigurations&quot;:[]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/material/getBomItemsStatusForConfiguration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Product Search" enabled="true"/>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">2</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} ProductSearch" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="query" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__Random(10,99,)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                  </elementProp>
                  <elementProp name="page" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">page</stringProp>
                  </elementProp>
                  <elementProp name="pageSize" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">6</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">pageSize</stringProp>
                  </elementProp>
                  <elementProp name="configurable" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">configurable</stringProp>
                  </elementProp>
                  <elementProp name="language" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">en-GB</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">language</stringProp>
                  </elementProp>
                  <elementProp name="salesOrganization" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">NL01</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">salesOrganization</stringProp>
                  </elementProp>
                  <elementProp name="distributionChannel" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">05</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">distributionChannel</stringProp>
                  </elementProp>
                  <elementProp name="soldTo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">31002737</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">soldTo</stringProp>
                  </elementProp>
                  <elementProp name="shipTo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">31002737</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">shipTo</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/products/search</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">1000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">2</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} ProductSearch" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="query" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__RandomString(2,qwertyuiopasdfghjklzxcvbnm,)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                  </elementProp>
                  <elementProp name="page" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">page</stringProp>
                  </elementProp>
                  <elementProp name="pageSize" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">6</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">pageSize</stringProp>
                  </elementProp>
                  <elementProp name="configurable" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">configurable</stringProp>
                  </elementProp>
                  <elementProp name="language" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">en-GB</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">language</stringProp>
                  </elementProp>
                  <elementProp name="salesOrganization" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">NL01</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">salesOrganization</stringProp>
                  </elementProp>
                  <elementProp name="distributionChannel" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">05</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">distributionChannel</stringProp>
                  </elementProp>
                  <elementProp name="soldTo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">31002737</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">soldTo</stringProp>
                  </elementProp>
                  <elementProp name="shipTo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">31002737</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">shipTo</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/products/search</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">1000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="AddProductAndChangePrice" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} ProductSearch" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">000912500100062</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                </elementProp>
                <elementProp name="pageSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">pageSize</stringProp>
                </elementProp>
                <elementProp name="configurable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">configurable</stringProp>
                </elementProp>
                <elementProp name="language" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">en-GB</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">language</stringProp>
                </elementProp>
                <elementProp name="salesOrganization" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">NL01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">salesOrganization</stringProp>
                </elementProp>
                <elementProp name="distributionChannel" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">05</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">distributionChannel</stringProp>
                </elementProp>
                <elementProp name="soldTo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">31002737</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">soldTo</stringProp>
                </elementProp>
                <elementProp name="shipTo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">31002737</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">shipTo</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/products/search</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">10</stringProp>
          </LoopController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="AddProduct" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} AddProduct Seq1 materialinfo1" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;salesAreaId&quot;:&quot;NL01/05/01&quot;,&quot;salesAreaName&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;soldTo&quot;:&quot;31002737&quot;,&quot;shipTo&quot;:&quot;31002737&quot;,&quot;materials&quot;:[{&quot;materialName&quot;:&quot;000912500100062&quot;}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/materialinfo</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">2000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} AddProduct Seq2 materialinfo2" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;materials&quot;: [&#xd;
        {&#xd;
            &quot;materialName&quot;: &quot;LL500XI&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;salesAreaId&quot;: &quot;NL01/05/01&quot;,&#xd;
    &quot;salesAreaName&quot;: &quot;Signify the Netherlands - Projects&quot;,&#xd;
    &quot;shipTo&quot;: &quot;31002737&quot;,&#xd;
    &quot;soldTo&quot;: &quot;31002737&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/materialinfo</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} AddProduct Seq3 getMaterialTemplateData" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;name&quot;:&quot;DN460BN&quot;,&quot;plant&quot;:&quot;HU02&quot;,&quot;usage&quot;:&quot;5&quot;,&quot;languages&quot;:[&quot;en-GB&quot;,&quot;en&quot;],&quot;rootConfiguration&quot;:{&quot;existingAssignments&quot;:[{&quot;variableName&quot;:&quot;Industrial.ZZSOFF&quot;,&quot;valueName&quot;:&quot;CR&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.BRD&quot;,&quot;valueName&quot;:&quot;PHL&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.HOUS&quot;,&quot;valueName&quot;:&quot;MINI&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.PFC&quot;,&quot;valueName&quot;:&quot;DN462B&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.LAMPFAM&quot;,&quot;valueName&quot;:&quot;LED11S&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.COLLAMP&quot;,&quot;valueName&quot;:&quot;830&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.TRAFO&quot;,&quot;valueName&quot;:&quot;PSU-E&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.LINEVOLT&quot;,&quot;valueName&quot;:&quot;220-240&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.OPT&quot;,&quot;valueName&quot;:&quot;C&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.EL&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CLR&quot;,&quot;valueName&quot;:&quot;WH&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CLS&quot;,&quot;valueName&quot;:&quot;II&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CABL&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.ELECACC&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CTRLINT&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.PFAM&quot;,&quot;valueName&quot;:&quot;DN460BN&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:true,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CVRACC&quot;,&quot;valueName&quot;:&quot;PCC&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false}],&quot;itemId&quot;:&quot;&quot;,&quot;materialName&quot;:&quot;000912500100062&quot;,&quot;configurableMaterialName&quot;:&quot;DN460BN&quot;,&quot;bomItemAssignments&quot;:[]},&quot;salesAreaName&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;salesAreaId&quot;:&quot;NL01/05/01&quot;,&quot;soldTo&quot;:&quot;31002737&quot;,&quot;shipTo&quot;:&quot;31002737&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/material/getMaterialTemplateData</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} AddProduct Seq4 getFromExistingConfiguration" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;name&quot;:&quot;DN460BN&quot;,&quot;plant&quot;:&quot;HU02&quot;,&quot;usage&quot;:&quot;5&quot;,&quot;languages&quot;:[&quot;en-GB&quot;,&quot;en&quot;],&quot;rootConfiguration&quot;:{&quot;existingAssignments&quot;:[{&quot;variableName&quot;:&quot;Industrial.ZZSOFF&quot;,&quot;valueName&quot;:&quot;CR&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.BRD&quot;,&quot;valueName&quot;:&quot;PHL&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.HOUS&quot;,&quot;valueName&quot;:&quot;MINI&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.PFC&quot;,&quot;valueName&quot;:&quot;DN462B&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.LAMPFAM&quot;,&quot;valueName&quot;:&quot;LED11S&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.COLLAMP&quot;,&quot;valueName&quot;:&quot;830&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.TRAFO&quot;,&quot;valueName&quot;:&quot;PSU-E&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.LINEVOLT&quot;,&quot;valueName&quot;:&quot;220-240&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.OPT&quot;,&quot;valueName&quot;:&quot;C&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.EL&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CLR&quot;,&quot;valueName&quot;:&quot;WH&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CLS&quot;,&quot;valueName&quot;:&quot;II&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CABL&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.ELECACC&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CTRLINT&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.PFAM&quot;,&quot;valueName&quot;:&quot;DN460BN&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:true,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CVRACC&quot;,&quot;valueName&quot;:&quot;PCC&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false}],&quot;itemId&quot;:&quot;&quot;,&quot;materialName&quot;:&quot;000912500100062&quot;,&quot;configurableMaterialName&quot;:&quot;DN460BN&quot;,&quot;bomItemAssignments&quot;:[]},&quot;salesAreaName&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;salesAreaId&quot;:&quot;NL01/05/01&quot;,&quot;soldTo&quot;:&quot;31002737&quot;,&quot;shipTo&quot;:&quot;31002737&quot;,&quot;environment&quot;:{&quot;rootEnvironment&quot;:{&quot;salesArea&quot;:{&quot;salesOrganization&quot;:&quot;NL01&quot;,&quot;distributionChannel&quot;:&quot;05&quot;},&quot;salesDocumentType&quot;:&quot;ZQU&quot;},&quot;materialEnvironment&quot;:[]}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/material/getFromExistingConfiguration</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} AddProduct Seq5 variants" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;lookupData&quot;:{&quot;name&quot;:&quot;DN460BN&quot;,&quot;usage&quot;:&quot;5&quot;,&quot;plant&quot;:&quot;HU02&quot;,&quot;languages&quot;:[&quot;en-GB&quot;,&quot;en&quot;]},&quot;rootItemData&quot;:{&quot;variantMatchingEnabled&quot;:true,&quot;bomItemId&quot;:&quot;&quot;,&quot;materialName&quot;:&quot;DN460BN&quot;,&quot;assignments&quot;:[{&quot;variableName&quot;:&quot;Industrial.ZZSOFF&quot;,&quot;valueName&quot;:&quot;CR&quot;,&quot;valueText&quot;:&quot;CR&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.HOUS&quot;,&quot;valueName&quot;:&quot;MINI&quot;,&quot;valueText&quot;:&quot;MINI - Mini&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.PFC&quot;,&quot;valueName&quot;:&quot;DN462B&quot;,&quot;valueText&quot;:&quot;DN462B - DN462B 150mm IP54/IP20 (PCO UGR27)&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.LAMPFAM&quot;,&quot;valueName&quot;:&quot;LED11S&quot;,&quot;valueText&quot;:&quot;LED11S&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.COLLAMP&quot;,&quot;valueName&quot;:&quot;830&quot;,&quot;valueText&quot;:&quot;830 - Warm White 3000K CRI &gt; 80&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.TRAFO&quot;,&quot;valueName&quot;:&quot;PSU-E&quot;,&quot;valueText&quot;:&quot;PSU-E - External Driver&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CLS&quot;,&quot;valueName&quot;:&quot;II&quot;,&quot;valueText&quot;:&quot;II - Safety class II&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.OPT&quot;,&quot;valueName&quot;:&quot;C&quot;,&quot;valueText&quot;:&quot;C - High Gloss&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.EL&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;valueText&quot;:&quot;NO - None&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CABL&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;valueText&quot;:&quot;NO - None&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CLR&quot;,&quot;valueName&quot;:&quot;WH&quot;,&quot;valueText&quot;:&quot;WH - White (RAL9003)&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.ELECACC&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;valueText&quot;:&quot;NO - None&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CVRACC&quot;,&quot;valueName&quot;:&quot;PCC&quot;,&quot;valueText&quot;:&quot;PCC - Polycarbonate Cover Clear&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CTRLINT&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;valueText&quot;:&quot;NO - No control interface&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.BRD&quot;,&quot;valueName&quot;:&quot;PHL&quot;,&quot;valueText&quot;:&quot;PHL - Philips&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.PFAM&quot;,&quot;valueName&quot;:&quot;DN460BN&quot;,&quot;valueText&quot;:&quot;DN460BN - GreenSpace 3D&quot;,&quot;isUserAssignment&quot;:false,&quot;isDefault&quot;:true,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.LINEVOLT&quot;,&quot;valueName&quot;:&quot;220-240&quot;,&quot;valueText&quot;:&quot;220-240 - 220-240V AC&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false}],&quot;childItemsData&quot;:[],&quot;salesArea&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;plant&quot;:&quot;HU02&quot;,&quot;preferredVariant&quot;:&quot;000000912500100062&quot;},&quot;environment&quot;:{&quot;rootEnvironment&quot;:{&quot;salesArea&quot;:{&quot;salesOrganization&quot;:&quot;NL01&quot;,&quot;distributionChannel&quot;:&quot;05&quot;},&quot;salesDocumentType&quot;:&quot;ZQU&quot;},&quot;materialEnvironment&quot;:[]},&quot;materialSalesArea&quot;:{&quot;salesOrganization&quot;:&quot;NL01&quot;,&quot;distributionChannel&quot;:&quot;05&quot;},&quot;soldTo&quot;:&quot;31002737&quot;,&quot;shipTo&quot;:&quot;31002737&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/variants/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} AddProduct Seq6 materialinfo3" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;salesAreaId&quot;:&quot;NL01/05/01&quot;,&quot;salesAreaName&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;soldTo&quot;:&quot;31002737&quot;,&quot;shipTo&quot;:&quot;31002737&quot;,&quot;materials&quot;:[{&quot;materialName&quot;:&quot;000912500100062&quot;,&quot;rootBomPlant&quot;:&quot;HU02&quot;,&quot;cacheKey&quot;:&quot;000912500100062$Signify the Netherlands - Projects$31002737$31002737$HU02&quot;}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/materialinfo</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} AddProduct Seq6 setRate0" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${SetRatePayload}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/quotations/pricing/sparse/set-rate</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.services.FileServer

def counter=vars.get(&quot;Counter&quot;) as int;
def payload = new File(&quot;C:/LoadScenarios_Payload/QA/SetRateRequestBody.json&quot;).getText();
def setRateLinePayload=new File(&quot;C:/LoadScenarios_Payload/QA/SetRateLineData.json&quot;).getText();
def jsonSlurper = new JsonSlurper()
def object = jsonSlurper.parseText(payload)
def setRateLineDataObject=jsonSlurper.parseText(setRateLinePayload);

def docID = vars.get(&quot;documentId&quot;) as String;
def revisonLanguage = &quot;-0-en-Us&quot;;
object.cacheKey = docID+revisonLanguage;

if(counter==1){
	def guid=UUID.randomUUID().toString();
	List&lt;String&gt; guidIds = new ArrayList()
	guidIds.add(guid);
	vars.putObject(&quot;LineIds&quot;,guidIds);
	setRateLineDataObject.philipsLineId=guid;
	}
else{
	def guid=UUID.randomUUID().toString();
	List&lt;String&gt; guidIds = vars.getObject(&quot;LineIds&quot;);
	guidIds.add(guid);
	vars.putObject(&quot;LineIds&quot;,guidIds);
	setRateLineDataObject.philipsLineId=guid;
	}
def linesPricingCommand={};
object.pricingDocument.linesEnvironments.add(setRateLineDataObject);
object.linesPricingCommands.add(linesPricingCommand);
object.pricingDocument.headerEnvironment.storageKeyInfo.documentId=vars.get(&quot;documentId&quot;) as String;
def requestBody=new groovy.json.JsonBuilder(object).toPrettyString();
vars.put(&quot;SetRatePayload&quot;,requestBody);
</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} AddProduct Seq7 Quotation" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${AddProductRequest}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/quotations/</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="AddProductQuotation Preprocessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.services.FileServer

def counter=vars.get(&quot;Counter&quot;) as int;
def jsonSlurper = new JsonSlurper()
List&lt;String&gt; lineIds = vars.getObject(&quot;LineIds&quot;);
if(counter==1){
def object = jsonSlurper.parseText(vars.get(&quot;AddCustomerRequest&quot;));
def customerResponsePayload = new File(vars.get(&quot;AddCustomerResponseData&quot;)).getText();
def customResponseObject=jsonSlurper.parseText(customerResponsePayload);
customResponseObject.each { key, val -&gt;
    if(key != &quot;metaData&quot;&amp;&amp; key!=&quot;patchLines&quot;&amp;&amp; key!=&quot;properties&quot;) {
    	if(object.containsKey(key)) {
      	object[key] = val;
    		}  	
    	}
}
def LineData = new File(&quot;C:/LoadScenarios_Payload/QA/LineData.json&quot;).getText();
     def line = jsonSlurper.parseText(LineData);
     log.info(vars.get(&apos;Counter&apos;));
	object.lines.add(line);
	log.info(vars.get(&apos;Counter&apos;));
     object.lines[0].lineId=lineIds[counter-1];
     object.lines[0].id=lineIds[counter-1];
     line.lineNumber=counter*10;
     def requestBody=new groovy.json.JsonBuilder(object).toPrettyString();
      
     vars.put(&quot;AddProductRequest&quot;,requestBody);
     vars.remove(&quot;AddCustomerRequest&quot;);
     vars.remove(&quot;AddCustomerResponseData&quot;);
}
else{
	def object=jsonSlurper.parseText(vars.get(&quot;UpdateItemPrice&quot;));
	def UpdateItemPriceResponsePayload = new File(vars.get(&quot;UpdateItemPriceResponseData&quot;)).getText();
     def UpdateItemPriceResponseObject=jsonSlurper.parseText(UpdateItemPriceResponsePayload);
     UpdateItemPriceResponseObject.each { key, val -&gt;
     if(key != &quot;metaData&quot;&amp;&amp; key!=&quot;patchLines&quot;&amp;&amp;key!=&quot;properties&quot;&amp;&amp;key!=&quot;lines&quot;) {
    	    if(object.containsKey(key)) {
      	    object[key] = val;
    		}  	
    	}
   }
	log.info(vars.get(&apos;Counter&apos;));
	def LineData = new File(&quot;C:/LoadScenarios_Payload/QA/LineData.json&quot;).getText();
     def line = jsonSlurper.parseText(LineData);
	object.lines.add(line);
     line.lineNumber=counter*10;
     line.lineId=lineIds[counter-1];
     line.id=lineIds[counter-1];
     log.info(vars.get(&apos;Counter&apos;));
     def requestBody=new groovy.json.JsonBuilder(object).toPrettyString();
     log.info(vars.get(&apos;Counter&apos;));
     vars.put(&quot;AddProductRequest&quot;,requestBody);
     vars.remove(&quot;UpdateItemPrice&quot;);
     vars.remove(&quot;UpdateItemPriceResponseData&quot;);
}



</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">AddProductResponseData</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.successonly">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <stringProp name="FileSaver.variablename">AddProductResponseData</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} AddProduct Seq8 setRate1" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${SetRatePayload}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/quotations/pricing/sparse/set-rate</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.services.FileServer

def counter=vars.get(&quot;Counter&quot;) as int;
def payload = new File(&quot;C:/LoadScenarios_Payload/QA/SetRateRequestBody.json&quot;).getText();
def setRateLinePayload=new File(&quot;C:/LoadScenarios_Payload/QA/SetRateLineData1.json&quot;).getText();
def jsonSlurper = new JsonSlurper()
def object = jsonSlurper.parseText(payload)
def setRateLineDataObject=jsonSlurper.parseText(setRateLinePayload);

def docID = vars.get(&quot;documentId&quot;) as String;
def revisonLanguage = &quot;-0-en-Us&quot;;
object.cacheKey = docID+revisonLanguage;

if(counter==1){
	def guid=UUID.randomUUID().toString();
	List&lt;String&gt; guidIds = new ArrayList()
	guidIds.add(guid);
	vars.putObject(&quot;LineIds&quot;,guidIds);
	setRateLineDataObject.philipsLineId=guid;
	}
else{
	def guid=UUID.randomUUID().toString();
	List&lt;String&gt; guidIds = vars.getObject(&quot;LineIds&quot;);
	guidIds.add(guid);
	vars.putObject(&quot;LineIds&quot;,guidIds);
	setRateLineDataObject.philipsLineId=guid;
	}
def linesPricingCommand={};
object.pricingDocument.linesEnvironments.add(setRateLineDataObject);
object.linesPricingCommands.add(linesPricingCommand);
object.pricingDocument.headerEnvironment.storageKeyInfo.documentId=vars.get(&quot;documentId&quot;) as String;
def requestBody=new groovy.json.JsonBuilder(object).toPrettyString();
vars.put(&quot;SetRatePayload&quot;,requestBody);
</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ChangePrice" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} ChangeitemPrice Seq1 setRate" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${SetRatePayload}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/quotations/pricing/sparse/set-rate</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.services.FileServer
def payload = new File(&quot;C:/LoadScenarios_Payload/QA/SetRateRequestBody.json&quot;).getText();
def setRateLinePayload=new File(&quot;C:/LoadScenarios_Payload/QA/SetRateLineData1.json&quot;).getText();
def jsonSlurper = new JsonSlurper()
def object = jsonSlurper.parseText(payload)
def setRateLineDataObject=jsonSlurper.parseText(setRateLinePayload);

def docID = vars.get(&quot;documentId&quot;) as String;
def revisonLanguage = &quot;-0-en-Us&quot;;
object.cacheKey = docID+revisonLanguage;

def counter=vars.get(&quot;Counter&quot;) as int;
List&lt;String&gt; lineIds = vars.getObject(&quot;LineIds&quot;);
for(int i=0;i&lt;counter;i++){
      def pricingCommandPayload= new File(&quot;C:/LoadScenarios_Payload/QA/SetRatePricingCommandData.json&quot;).getText();
      def pricingCommandData=jsonSlurper.parseText(pricingCommandPayload);
	 object.pricingDocument.linesEnvironments.add(setRateLineDataObject);
	 object.linesPricingCommands.add(pricingCommandData);
	 setRateLineDataObject.philipsLineId=lineIds[counter-1];
}
object.pricingDocument.headerEnvironment.storageKeyInfo.documentId=vars.get(&quot;documentId&quot;) as String;
def requestBody=new groovy.json.JsonBuilder(object).toPrettyString();
vars.put(&quot;SetRatePayload&quot;,requestBody);
</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} ChangeItemPrice Seq2 ChangeQuotation" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${UpdateItemPrice}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/quotations/</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">version2</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.version</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">5000</stringProp>
                </ConstantTimer>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="changeItem Preprocessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.services.FileServer
log.info(&quot;result&quot;);
def AddProductResponseData = new File(vars.get(&quot;AddProductResponseData&quot;)).getText();
def jsonSlurper = new JsonSlurper()
def object = jsonSlurper.parseText(vars.get(&quot;AddProductRequest&quot;))
def AddProductResponseObject=jsonSlurper.parseText(AddProductResponseData);
object.priceIsOutdated=false;
AddProductResponseObject.each { key, val -&gt;
    if(key != &quot;metaData&quot;&amp;&amp;key!=&quot;properties&quot;&amp;&amp;key!=&quot;lines&quot;) {
    	if(object.containsKey(key)) {
      	object[key] = val;
    		}  	
    	}
}
def counter=vars.get(&apos;Counter&apos;) as int;
def pricingCommandPayload= new File(&quot;C:/LoadScenarios_Payload/QA/PricingCommand.json&quot;).getText();
def pricingCommandData=jsonSlurper.parseText(pricingCommandPayload);


object.lines[counter-1].pricingCommands.add(pricingCommandData);
def requestBody=new groovy.json.JsonBuilder(object).toPrettyString();
vars.put(&quot;UpdateItemPrice&quot;,requestBody);
vars.remove(&quot;AddProductRequest&quot;);
vars.remove(&quot;AddProductResponseData&quot;);</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">UpdateItemPriceResponseData</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.successonly">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <stringProp name="FileSaver.variablename">UpdateItemPriceResponseData</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
            </hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">10</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">Counter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
            </CounterConfig>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">8000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} ChangeItemPrice Seq3 QuoteQL" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;query&quot;: &quot;query { quotes { quote(documentVersion: {documentId: \&quot;${documentId}\&quot;, revision: 0}) { versionEquals(version: \&quot;${version2}\&quot; ) } } } &quot;,&#xd;
    &quot;variables&quot;: {}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PrintQuote" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} PrintQuote Seq1 Approvals" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;query&quot;: &quot;query getApprovalBundle($documentId: String!, $revision: Int!) {\n        approvals {\n          approvalBundle(documentVersion: {documentId: $documentId, revision: $revision}) {\n            status\n          }\n        }\n      }&quot;,&#xd;
    &quot;variables&quot;: {&#xd;
        &quot;documentId&quot;: &quot;${documentId}&quot;,&#xd;
        &quot;revision&quot;: 0&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/QuoteQL</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} PrintQuote Seq2 getTemplates" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;SalesArea&quot;:&quot;NL01/05/01&quot;,&quot;SalesDocumentType&quot;:&quot;ZQU&quot;,&quot;PriceProcedure&quot;:&quot;ZVI201&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/ext/etoBooklet/getTemplates</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} PrintQuote" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;quoteId&quot;:&quot;${documentId}&quot;,&quot;revisionId&quot;:0,&quot;language&quot;:&quot;en-GB&quot;,&quot;templateFile&quot;:&quot;ATO_2_COMM&quot;,&quot;options&quot;:&quot;^--=true^OPTA=true^OPTB=true^OPTC=true^OPTD=true^OPTE=true^OPTF=true^-=true^BrutoPrice=true^HidePrices=true^Docx=true^PDF=false^&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/ext/etoBooklet/create/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept-language</stringProp>
                  <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8,ta;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SapUpload" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} UploadToSap Seq1 QuoteUpload" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;documentId&quot;:&quot;${documentId}&quot;,&quot;revision&quot;:0,&quot;version&quot;:&quot;${version2}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/quoteUpload/uploadToSap</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">3000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">300</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">UserCounter</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ArchiveQuote" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} Archive Quote HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;selectedQuotations&quot;: [&#xd;
        {&#xd;
            &quot;documentId&quot;: &quot;${documentId}&quot;,&#xd;
            &quot;revision&quot;: 0&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/quotations/selected/archive/</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SalesUser" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">20</stringProp>
        <stringProp name="ThreadGroup.ramp_time">120</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load QuoteOverViewPage" enabled="true"/>
        <hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Load QuoteOverViewPage" enabled="true">
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} Load QuoteOverViewPage Seq1 QuoteQL1" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;query { roles { all { id name members { id } claims { claimType: type claimValue: value } } } } &quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} Load QuoteOverViewPage Seq1 Status " enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/resources/Quote/Status</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} Load QuoteOverViewPage Seq2 QuoteQL2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetLicense&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query GetLicense {\n  license {\n    demo\n    invalid\n    violated\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} Load QuoteOverViewPage Seq3 QuoteQL3" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;query search ( $expressions: ExpressionsInput, $paging: PageInput!, $orderBy: [OrderByInput], $priceLineStepIds: [String!] ) { quotes { groupedRevisions ( paging: $paging orderBy:$orderBy expressions:$expressions ) { ...documentRevisionGroupWithPriceCalculation } } } fragment documentRevisionGroupWithPriceCalculation on DocumentRevisionGroupsPayload { pageInfo { totalCount } items { ...documentRevisionGroupItemWithPriceCalculation } } fragment documentRevisionGroupItemWithPriceCalculation on DocumentRevisionsGroup { priceIsOutdated autoUpdatePrices currency totalNetValue ownerUserName owner { id name } documentId title status soldToCompanyName latestRevision archived quickRefs isProcessing erpDocumentIds crmOpportunityIds linesCount salesAreaName salesAreaId modifiedDate validTo expirationDate: validTo createdDate approvalStatus hasApprovalRuleSet revisions { hasSystemLines customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } archived erpDocumentId validTo expirationDate: validTo documentId revision ownerUserName owner { id name } status title quickRef createdDate modifiedDate createdBy creator { id name } modifiedBy modifier { id name } locked currency totalNetValue totalTaxValue autoUpdatePrices salesArea { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } id distributionChannel localCurrency name salesDivision salesOrganization currency } isProcessing processingStartedBy crmOpportunityId approvalStatus linesCount approvalBundle { bundleId requestedBy { name id } requesterComment locked status } language soldTo { partner { ...partnerItem } hierarchy { partnerRole companyName street zip city state countryCode accountGroup isSalesAreaDependent website phone fax externalId vatRegNo addressNumber integrationId parentId partnerId } } showPrices priceCalculation { priceLines(stepIds: $priceLineStepIds) { stepId id conditionValue } basePrice invalidMessage isValid netValue subTotal taxValue totalDiscount totalPrice unitBasePrice } } } fragment partnerItem on Partner { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } partnerRole defaultPartnerRoles companyName street zip city state countryCode accountGroup isSalesAreaDependent website phone fax externalId vatRegNo addressNumber integrationId parentId partnerId contactPerson { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } title firstName lastName email phone fax externalId personNumber } salesAreaData { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } salesOrganization distributionChannel salesDivision salesDistrict { text value } salesOffice salesGroup customerGroup currency priceGroup priceList shippingConditions plant incoTerms1 incoTerms2 paymentTerms customerPricingProcedure exchangeRateType relevantForRebate } }&quot;,&quot;variables&quot;:{&quot;paging&quot;:{&quot;page&quot;:0,&quot;perPage&quot;:50},&quot;orderBy&quot;:[{&quot;field&quot;:&quot;ModifiedDate&quot;,&quot;order&quot;:&quot;Descending&quot;}],&quot;expressions&quot;:{&quot;term&quot;:{&quot;field&quot;:&quot;Deleted&quot;,&quot;comparisonType&quot;:&quot;Equal&quot;,&quot;value&quot;:&quot;false&quot;},&quot;subExpressions&quot;:[{&quot;term&quot;:{&quot;field&quot;:&quot;OwnerUserName&quot;,&quot;comparisonType&quot;:&quot;Equal&quot;,&quot;value&quot;:&quot;7876890b-6cb0-d30c-f29d-40189ac600a4&quot;},&quot;subExpressions&quot;:null,&quot;operator&quot;:&quot;And&quot;}],&quot;operator&quot;:&quot;And&quot;},&quot;priceLineStepIds&quot;:[&quot;440.00&quot;,&quot;500.00&quot;,&quot;981.00&quot;,&quot;605.00&quot;,&quot;600.00&quot;,&quot;449.00&quot;,&quot;590.00&quot;,&quot;700.00&quot;]}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CreateQuote" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} CreateQuote Seq1 Quotations" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;title&quot;:&quot;SalesUser${UserCounter}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/quotations/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">documentId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">version</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.version</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="CreateQuoteFromQuotesOverviewPage" enabled="true">
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} CreateQuote Seq2 templates" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/templates/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} CreateQuote Seq2  featureModels" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/featureModels/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} CreateQuote Seq2 QuoteQL1" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;query&quot;: &quot;query ($querystring: String, $paging: PageInput!) { systems { systems(querystring: $querystring, paging: $paging) { items { id name productId productGroupId location description salesAreas image customRequestData { key valuePath } } pageInfo { count currentPage hasNextPage hasPreviousPage pageCount perPage totalCount } } } } &quot;,&#xd;
    &quot;variables&quot;: {&#xd;
        &quot;paging&quot;: {&#xd;
            &quot;page&quot;: 0,&#xd;
            &quot;perPage&quot;: 50&#xd;
        },&#xd;
        &quot;querystring&quot;: null&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} CreateQuote Seq2 QuoteQL2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;operationName&quot;: &quot;GetBreadcrumbsQuickRef&quot;,&#xd;
    &quot;query&quot;: &quot;query GetBreadcrumbsQuickRef($id: String!, $revision: Int!) {\n  quotes {\n    quote(documentVersion: {documentId: $id, revision: $revision}) {\n      id\n      quickRef\n      title\n      __typename\n    }\n    __typename\n  }\n}\n&quot;,&#xd;
    &quot;variables&quot;: {&#xd;
        &quot;id&quot;: &quot;${documentId}&quot;,&#xd;
        &quot;revision&quot;: 0&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} CreateQuote Seq2  /api/quotations/${documentId}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="revision" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">revision</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/quotations/${documentId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">QuotePayload</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.quote</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} CreateQuote Seq2 QuoteQL3" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;query&quot;: &quot;query getQuote( $documentVersion: DocumentVersionInput! ) { quotes { quote( documentVersion: $documentVersion ) { owner { id name } } } } &quot;,&#xd;
    &quot;variables&quot;: {&#xd;
        &quot;documentVersion&quot;: {&#xd;
            &quot;documentId&quot;: &quot;${documentId}&quot;,&#xd;
            &quot;revision&quot;: 0&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} CreateQuote Seq3 GetBomItemsEnvironmentInfo" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/material/GetBomItemsEnvironmentInfo</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} CreateQuote Seq4 getBomItemsStatusForConfiguration" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;environment&quot;: {&#xd;
        &quot;materialEnvironment&quot;: [&#xd;
        ],&#xd;
        &quot;rootEnvironment&quot;: {&#xd;
            &quot;salesArea&quot;: {&#xd;
                &quot;distributionChannel&quot;: &quot;05&quot;,&#xd;
                &quot;salesOrganization&quot;: &quot;NL01&quot;&#xd;
            },&#xd;
            &quot;salesDocumentType&quot;: &quot;ZQU&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;existingConfigurations&quot;: [&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/material/getBomItemsStatusForConfiguration</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="CreateQuoteFromQuotesOverviewPage" enabled="true">
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} CreateQuote Seq5 QuoteQL4" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;query&quot;: &quot;query getApprovalConstraints($documentId: String!, $revision: Int!, $salesAreaId: String!) { approvals { approvalsEnabled: approvalsEnabled(salesAreaId: $salesAreaId) printingAllowed: isFeatureAllowed(documentVersion: {documentId: $documentId, revision: $revision}, feature: Printing), sapUploadAllowed: isFeatureAllowed(documentVersion: {documentId: $documentId, revision: $revision}, feature: SapUpload) } } &quot;,&#xd;
    &quot;variables&quot;: {&#xd;
        &quot;documentId&quot;: &quot;${documentId}&quot;,&#xd;
        &quot;revision&quot;: 0,&#xd;
        &quot;salesAreaId&quot;: &quot;NL01/05/01&quot;&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} CreateQuote Seq5 /api/output/csv/templates/" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;SalesDocumentType&quot;:&quot;ZQU&quot;,&quot;SalesOrganization&quot;:&quot;NL01&quot;,&quot;SalesDistributionChannel&quot;:&quot;05&quot;,&quot;SalesDivision&quot;:&quot;01&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/output/csv/templates/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} CreateQuote Seq5 /api/output/print/templates/" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;SalesDocumentType&quot;:&quot;ZQU&quot;,&quot;SalesOrganization&quot;:&quot;NL01&quot;,&quot;SalesDistributionChannel&quot;:&quot;05&quot;,&quot;SalesDivision&quot;:&quot;01&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/output/print/templates/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="OpenCustomerPage" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">5000</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="OpenCustomerPage" enabled="true">
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} OpenCustomerPage Seq1 QuoteQL1" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;query countriesInWhichUserHaveAccess ($search: String, $salesAreaName: String, $partnerRole: String) { permissions { countryCode(filter: $search, salesAreaNameOrId: $salesAreaName, partnerRole: $partnerRole, paging: {page: 0, perPage: 50}) { hasMore items { value text } } } } &quot;,&quot;variables&quot;:{&quot;salesAreaName&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;partnerRole&quot;:&quot;AG&quot;}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} OpenCustomerPage Seq1 QuoteQL2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;query salesDistrictsInWhichUserHaveAccess ($search: String) { permissions { salesDistricts(filter: $search, paging: {page: 0, perPage: 50}) { hasMore items { value text } } } } &quot;,&quot;variables&quot;:{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} OpenCustomerPage Seq1 QuoteQL3" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;query getPartnersList($filter: PartnerFilterInput!, $paging: PageInput) { partners { partners(filter:$filter, paging:$paging) { hasMore items{ ...partnerItem } } isCacheable } } fragment partnerItem on Partner { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } partnerRole defaultPartnerRoles companyName street zip city state countryCode accountGroup isSalesAreaDependent website phone fax externalId vatRegNo addressNumber integrationId parentId partnerId contactPerson { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } title firstName lastName email phone fax externalId personNumber } salesAreaData { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } salesOrganization distributionChannel salesDivision salesDistrict { text value } salesOffice salesGroup customerGroup currency priceGroup priceList shippingConditions plant incoTerms1 incoTerms2 paymentTerms customerPricingProcedure exchangeRateType relevantForRebate } }&quot;,&quot;variables&quot;:{&quot;filter&quot;:{&quot;salesArea&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;searchTerm&quot;:&quot;&quot;,&quot;partnerRole&quot;:&quot;AG&quot;},&quot;paging&quot;:{&quot;page&quot;:0,&quot;perPage&quot;:48}}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SearchCustomer" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} SearchCustomer" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;query&quot;: &quot;query getPartnersList($filter: PartnerFilterInput!, $paging: PageInput) { partners { partners(filter:$filter, paging:$paging) { hasMore items{ ...partnerItem } } isCacheable } } fragment partnerItem on Partner { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } partnerRole defaultPartnerRoles companyName street zip city state countryCode accountGroup isSalesAreaDependent website phone fax externalId vatRegNo addressNumber integrationId parentId partnerId contactPerson { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } title firstName lastName email phone fax externalId personNumber } salesAreaData { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } salesOrganization distributionChannel salesDivision salesDistrict { text value } salesOffice salesGroup customerGroup currency priceGroup priceList shippingConditions plant incoTerms1 incoTerms2 paymentTerms customerPricingProcedure exchangeRateType relevantForRebate } }&quot;,&#xd;
    &quot;variables&quot;: {&#xd;
        &quot;filter&quot;: {&#xd;
            &quot;partnerRole&quot;: &quot;AG&quot;,&#xd;
            &quot;salesArea&quot;: &quot;Signify the Netherlands - Projects&quot;,&#xd;
            &quot;searchTerm&quot;: &quot;31002737 &quot;&#xd;
        },&#xd;
        &quot;paging&quot;: {&#xd;
            &quot;page&quot;: 0,&#xd;
            &quot;perPage&quot;: 48&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="AddCustomer" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">3000</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">1000</stringProp>
                <stringProp name="RandomTimer.range">100</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="AddCustomerFromCustomerPage" enabled="true">
              <boolProp name="PARENT_SAMPLE">false</boolProp>
              <intProp name="MAX_THREAD_NUMBER">6</intProp>
              <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
            </com.blazemeter.jmeter.controller.ParallelSampler>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} AddCustomer Seq1 GetPartnerChangeData" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;customerPricingProcedure&quot;: &quot;1&quot;,&#xd;
    &quot;materialLines&quot;: [&#xd;
    ],&#xd;
    &quot;salesArea&quot;: {&#xd;
        &quot;distributionChannel&quot;: &quot;05&quot;,&#xd;
        &quot;salesDivision&quot;: &quot;01&quot;,&#xd;
        &quot;salesOrganization&quot;: &quot;NL01&quot;&#xd;
    },&#xd;
    &quot;salesDocumentType&quot;: &quot;ZQU&quot;,&#xd;
    &quot;shipTo&quot;: &quot;31002737&quot;,&#xd;
    &quot;soldTo&quot;: &quot;31002737&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/partners/GetPartnerChangeData</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="AddCustomerFromCustomerPage" enabled="true">
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} AddCustomer Seq2 Quotation" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${AddCustomerRequest}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/quotations/</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.services.FileServer
log.info(&quot;result&quot;);
def payload = new File(&quot;C:/LoadScenarios_Payload/QA/AddCustomerRequestBody.json&quot;).getText();
def jsonSlurper = new JsonSlurper()
def object = jsonSlurper.parseText(vars.get(&quot;QuotePayload&quot;))
def customerObject= jsonSlurper.parseText(payload);
object.salesDistrict=&quot;NL0204&quot;;
object.salesOffice=&quot;NL70&quot;;
object.customerGroup=&quot;04&quot;;
object.priceGroup=&quot;04&quot;;
object.put(&quot;partners&quot;,customerObject.partners);
object.put(&quot;erpDocumentId&quot;,null);
object.put(&quot;isReadOnly&quot;,false);
object.soldTo=customerObject.soldTo;
object.shipTo=customerObject.shipTo;
object.payer=customerObject.payer;
object.billTo=customerObject.billTo;
def requestBody=new groovy.json.JsonBuilder(object).toPrettyString();
vars.put(&quot;AddCustomerRequest&quot;,requestBody);
vars.remove(&quot;QuotePayload&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                <stringProp name="FileSaver.filename">AddCustomer</stringProp>
                <boolProp name="FileSaver.errorsonly">false</boolProp>
                <boolProp name="FileSaver.successonly">true</boolProp>
                <boolProp name="FileSaver.skipsuffix">false</boolProp>
                <boolProp name="FileSaver.skipautonumber">false</boolProp>
                <stringProp name="FileSaver.variablename">AddCustomerResponseData</stringProp>
              </ResultSaver>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} AddCustomer Seq3 QuoteQL" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;query { quotes { quote(documentVersion: {documentId: \&quot;${documentId}\&quot;, revision: 0}) { versionEquals(version: \&quot;${version}\&quot; ) } } } &quot;,&quot;variables&quot;:{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} AddCustomer Seq4 DocumentId" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="revision" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">revision</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/quotations/${documentId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} AddCustomer Seq5 GetBomItemsEnvironmentInfo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/material/GetBomItemsEnvironmentInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} AddCustomer Seq6 getBomItemsStatusForConfiguration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;environment&quot;:{&quot;rootEnvironment&quot;:{&quot;salesArea&quot;:{&quot;salesOrganization&quot;:&quot;NL01&quot;,&quot;distributionChannel&quot;:&quot;05&quot;},&quot;salesDocumentType&quot;:&quot;ZQU&quot;},&quot;materialEnvironment&quot;:[]},&quot;existingConfigurations&quot;:[]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/material/getBomItemsStatusForConfiguration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="AddProductAndChangePrice" enabled="true"/>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">3</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} ProductSearch" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="query" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">912500100062</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                  </elementProp>
                  <elementProp name="page" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">page</stringProp>
                  </elementProp>
                  <elementProp name="pageSize" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">6</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">pageSize</stringProp>
                  </elementProp>
                  <elementProp name="configurable" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">configurable</stringProp>
                  </elementProp>
                  <elementProp name="language" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">en-GB</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">language</stringProp>
                  </elementProp>
                  <elementProp name="salesOrganization" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">NL01</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">salesOrganization</stringProp>
                  </elementProp>
                  <elementProp name="distributionChannel" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">05</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">distributionChannel</stringProp>
                  </elementProp>
                  <elementProp name="soldTo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">31002737</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">soldTo</stringProp>
                  </elementProp>
                  <elementProp name="shipTo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">31002737</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">shipTo</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/products/search/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">1000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="AddProduct" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} AddProduct Seq1 materialinfo1" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;salesAreaId&quot;:&quot;NL01/05/01&quot;,&quot;salesAreaName&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;soldTo&quot;:&quot;31002737&quot;,&quot;shipTo&quot;:&quot;31002737&quot;,&quot;materials&quot;:[{&quot;materialName&quot;:&quot;000912500100062&quot;}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/materialinfo</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">2000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} AddProduct Seq2 materialInfo2" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;materials&quot;: [&#xd;
        {&#xd;
            &quot;materialName&quot;: &quot;LL500XI&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;salesAreaId&quot;: &quot;NL01/05/01&quot;,&#xd;
    &quot;salesAreaName&quot;: &quot;Signify the Netherlands - Projects&quot;,&#xd;
    &quot;shipTo&quot;: &quot;31002737&quot;,&#xd;
    &quot;soldTo&quot;: &quot;31002737&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/materialinfo</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} AddProduct Seq3 getMaterialTemplateData" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;name&quot;:&quot;DN460BN&quot;,&quot;plant&quot;:&quot;HU02&quot;,&quot;usage&quot;:&quot;5&quot;,&quot;languages&quot;:[&quot;en-GB&quot;,&quot;en&quot;],&quot;rootConfiguration&quot;:{&quot;existingAssignments&quot;:[{&quot;variableName&quot;:&quot;Industrial.ZZSOFF&quot;,&quot;valueName&quot;:&quot;CR&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.BRD&quot;,&quot;valueName&quot;:&quot;PHL&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.HOUS&quot;,&quot;valueName&quot;:&quot;MINI&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.PFC&quot;,&quot;valueName&quot;:&quot;DN462B&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.LAMPFAM&quot;,&quot;valueName&quot;:&quot;LED11S&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.COLLAMP&quot;,&quot;valueName&quot;:&quot;830&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.TRAFO&quot;,&quot;valueName&quot;:&quot;PSU-E&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.LINEVOLT&quot;,&quot;valueName&quot;:&quot;220-240&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.OPT&quot;,&quot;valueName&quot;:&quot;C&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.EL&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CLR&quot;,&quot;valueName&quot;:&quot;WH&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CLS&quot;,&quot;valueName&quot;:&quot;II&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CABL&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.ELECACC&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CTRLINT&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.PFAM&quot;,&quot;valueName&quot;:&quot;DN460BN&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:true,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CVRACC&quot;,&quot;valueName&quot;:&quot;PCC&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false}],&quot;itemId&quot;:&quot;&quot;,&quot;materialName&quot;:&quot;000912500100062&quot;,&quot;configurableMaterialName&quot;:&quot;DN460BN&quot;,&quot;bomItemAssignments&quot;:[]},&quot;salesAreaName&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;salesAreaId&quot;:&quot;NL01/05/01&quot;,&quot;soldTo&quot;:&quot;31002737&quot;,&quot;shipTo&quot;:&quot;31002737&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/material/getMaterialTemplateData</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} AddProduct Seq4 getFromExistingConfiguration" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;name&quot;:&quot;DN460BN&quot;,&quot;plant&quot;:&quot;HU02&quot;,&quot;usage&quot;:&quot;5&quot;,&quot;languages&quot;:[&quot;en-GB&quot;,&quot;en&quot;],&quot;rootConfiguration&quot;:{&quot;existingAssignments&quot;:[{&quot;variableName&quot;:&quot;Industrial.ZZSOFF&quot;,&quot;valueName&quot;:&quot;CR&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.BRD&quot;,&quot;valueName&quot;:&quot;PHL&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.HOUS&quot;,&quot;valueName&quot;:&quot;MINI&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.PFC&quot;,&quot;valueName&quot;:&quot;DN462B&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.LAMPFAM&quot;,&quot;valueName&quot;:&quot;LED11S&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.COLLAMP&quot;,&quot;valueName&quot;:&quot;830&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.TRAFO&quot;,&quot;valueName&quot;:&quot;PSU-E&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.LINEVOLT&quot;,&quot;valueName&quot;:&quot;220-240&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.OPT&quot;,&quot;valueName&quot;:&quot;C&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.EL&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CLR&quot;,&quot;valueName&quot;:&quot;WH&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CLS&quot;,&quot;valueName&quot;:&quot;II&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CABL&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.ELECACC&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CTRLINT&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.PFAM&quot;,&quot;valueName&quot;:&quot;DN460BN&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:true,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CVRACC&quot;,&quot;valueName&quot;:&quot;PCC&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false}],&quot;itemId&quot;:&quot;&quot;,&quot;materialName&quot;:&quot;000912500100062&quot;,&quot;configurableMaterialName&quot;:&quot;DN460BN&quot;,&quot;bomItemAssignments&quot;:[]},&quot;salesAreaName&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;salesAreaId&quot;:&quot;NL01/05/01&quot;,&quot;soldTo&quot;:&quot;31002737&quot;,&quot;shipTo&quot;:&quot;31002737&quot;,&quot;environment&quot;:{&quot;rootEnvironment&quot;:{&quot;salesArea&quot;:{&quot;salesOrganization&quot;:&quot;NL01&quot;,&quot;distributionChannel&quot;:&quot;05&quot;},&quot;salesDocumentType&quot;:&quot;ZQU&quot;},&quot;materialEnvironment&quot;:[]}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/material/getFromExistingConfiguration</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} AddProduct Seq5 variants" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;lookupData&quot;:{&quot;name&quot;:&quot;DN460BN&quot;,&quot;usage&quot;:&quot;5&quot;,&quot;plant&quot;:&quot;HU02&quot;,&quot;languages&quot;:[&quot;en-GB&quot;,&quot;en&quot;]},&quot;rootItemData&quot;:{&quot;variantMatchingEnabled&quot;:true,&quot;bomItemId&quot;:&quot;&quot;,&quot;materialName&quot;:&quot;DN460BN&quot;,&quot;assignments&quot;:[{&quot;variableName&quot;:&quot;Industrial.ZZSOFF&quot;,&quot;valueName&quot;:&quot;CR&quot;,&quot;valueText&quot;:&quot;CR&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.HOUS&quot;,&quot;valueName&quot;:&quot;MINI&quot;,&quot;valueText&quot;:&quot;MINI - Mini&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.PFC&quot;,&quot;valueName&quot;:&quot;DN462B&quot;,&quot;valueText&quot;:&quot;DN462B - DN462B 150mm IP54/IP20 (PCO UGR27)&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.LAMPFAM&quot;,&quot;valueName&quot;:&quot;LED11S&quot;,&quot;valueText&quot;:&quot;LED11S&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.COLLAMP&quot;,&quot;valueName&quot;:&quot;830&quot;,&quot;valueText&quot;:&quot;830 - Warm White 3000K CRI &gt; 80&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.TRAFO&quot;,&quot;valueName&quot;:&quot;PSU-E&quot;,&quot;valueText&quot;:&quot;PSU-E - External Driver&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CLS&quot;,&quot;valueName&quot;:&quot;II&quot;,&quot;valueText&quot;:&quot;II - Safety class II&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.OPT&quot;,&quot;valueName&quot;:&quot;C&quot;,&quot;valueText&quot;:&quot;C - High Gloss&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.EL&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;valueText&quot;:&quot;NO - None&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CABL&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;valueText&quot;:&quot;NO - None&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CLR&quot;,&quot;valueName&quot;:&quot;WH&quot;,&quot;valueText&quot;:&quot;WH - White (RAL9003)&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.ELECACC&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;valueText&quot;:&quot;NO - None&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CVRACC&quot;,&quot;valueName&quot;:&quot;PCC&quot;,&quot;valueText&quot;:&quot;PCC - Polycarbonate Cover Clear&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CTRLINT&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;valueText&quot;:&quot;NO - No control interface&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.BRD&quot;,&quot;valueName&quot;:&quot;PHL&quot;,&quot;valueText&quot;:&quot;PHL - Philips&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.PFAM&quot;,&quot;valueName&quot;:&quot;DN460BN&quot;,&quot;valueText&quot;:&quot;DN460BN - GreenSpace 3D&quot;,&quot;isUserAssignment&quot;:false,&quot;isDefault&quot;:true,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.LINEVOLT&quot;,&quot;valueName&quot;:&quot;220-240&quot;,&quot;valueText&quot;:&quot;220-240 - 220-240V AC&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false}],&quot;childItemsData&quot;:[],&quot;salesArea&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;plant&quot;:&quot;HU02&quot;,&quot;preferredVariant&quot;:&quot;000000912500100062&quot;},&quot;environment&quot;:{&quot;rootEnvironment&quot;:{&quot;salesArea&quot;:{&quot;salesOrganization&quot;:&quot;NL01&quot;,&quot;distributionChannel&quot;:&quot;05&quot;},&quot;salesDocumentType&quot;:&quot;ZQU&quot;},&quot;materialEnvironment&quot;:[]},&quot;materialSalesArea&quot;:{&quot;salesOrganization&quot;:&quot;NL01&quot;,&quot;distributionChannel&quot;:&quot;05&quot;},&quot;soldTo&quot;:&quot;31002737&quot;,&quot;shipTo&quot;:&quot;31002737&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/variants/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} AddProduct Seq6 materialInfo" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;salesAreaId&quot;:&quot;NL01/05/01&quot;,&quot;salesAreaName&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;soldTo&quot;:&quot;31002737&quot;,&quot;shipTo&quot;:&quot;31002737&quot;,&quot;materials&quot;:[{&quot;materialName&quot;:&quot;000912500100062&quot;,&quot;rootBomPlant&quot;:&quot;HU02&quot;,&quot;cacheKey&quot;:&quot;000912500100062$Signify the Netherlands - Projects$31002737$31002737$HU02&quot;}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/materialinfo</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} AddProduct Seq6 setRate0" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${SetRatePayload}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/quotations/pricing/sparse/set-rate</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.services.FileServer

def counter=vars.get(&quot;Counter&quot;) as int;
def payload = new File(&quot;C:/LoadScenarios_Payload/QA/SetRateRequestBody.json&quot;).getText();
def setRateLinePayload=new File(&quot;C:/LoadScenarios_Payload/QA/SetRateLineData.json&quot;).getText();
def jsonSlurper = new JsonSlurper()
def object = jsonSlurper.parseText(payload)
def setRateLineDataObject=jsonSlurper.parseText(setRateLinePayload);

def docID = vars.get(&quot;documentId&quot;) as String;
def revisonLanguage = &quot;-0-en-Us&quot;;
object.cacheKey = docID+revisonLanguage;

if(counter==1){
	def guid=UUID.randomUUID().toString();
	List&lt;String&gt; guidIds = new ArrayList()
	guidIds.add(guid);
	vars.putObject(&quot;LineIds&quot;,guidIds);
	setRateLineDataObject.philipsLineId=guid;
	}
else{
	def guid=UUID.randomUUID().toString();
	List&lt;String&gt; guidIds = vars.getObject(&quot;LineIds&quot;);
	guidIds.add(guid);
	vars.putObject(&quot;LineIds&quot;,guidIds);
	setRateLineDataObject.philipsLineId=guid;
	}
def linesPricingCommand={};
object.pricingDocument.linesEnvironments.add(setRateLineDataObject);
object.linesPricingCommands.add(linesPricingCommand);
object.pricingDocument.headerEnvironment.storageKeyInfo.documentId=vars.get(&quot;documentId&quot;) as String;
def requestBody=new groovy.json.JsonBuilder(object).toPrettyString();
vars.put(&quot;SetRatePayload&quot;,requestBody);
</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} AddProduct Seq7 Quotation" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${AddProductRequest}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/quotations/</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="AddProductQuotation Preprocessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.services.FileServer

def counter=vars.get(&quot;Counter&quot;) as int;
def jsonSlurper = new JsonSlurper()
List&lt;String&gt; lineIds = vars.getObject(&quot;LineIds&quot;);
if(counter==1){
def object = jsonSlurper.parseText(vars.get(&quot;AddCustomerRequest&quot;));
def customerResponsePayload = new File(vars.get(&quot;AddCustomerResponseData&quot;)).getText();
def customResponseObject=jsonSlurper.parseText(customerResponsePayload);
customResponseObject.each { key, val -&gt;
    if(key != &quot;metaData&quot;&amp;&amp; key!=&quot;patchLines&quot;&amp;&amp; key!=&quot;properties&quot;) {
    	if(object.containsKey(key)) {
      	object[key] = val;
    		}  	
    	}
}
def LineData = new File(&quot;C:/LoadScenarios_Payload/QA/LineData.json&quot;).getText();
     def line = jsonSlurper.parseText(LineData);
     log.info(vars.get(&apos;Counter&apos;));
	object.lines.add(line);
	log.info(vars.get(&apos;Counter&apos;));
     object.lines[0].lineId=lineIds[counter-1];
     object.lines[0].id=lineIds[counter-1];
     line.lineNumber=counter*10;
     def requestBody=new groovy.json.JsonBuilder(object).toPrettyString();
      
     vars.put(&quot;AddProductRequest&quot;,requestBody);
     vars.remove(&quot;AddCustomerRequest&quot;);
     vars.remove(&quot;AddCustomerResponseData&quot;);
}
else{
	def object=jsonSlurper.parseText(vars.get(&quot;UpdateItemPrice&quot;));
	def UpdateItemPriceResponsePayload = new File(vars.get(&quot;UpdateItemPriceResponseData&quot;)).getText();
     def UpdateItemPriceResponseObject=jsonSlurper.parseText(UpdateItemPriceResponsePayload);
     UpdateItemPriceResponseObject.each { key, val -&gt;
     if(key != &quot;metaData&quot;&amp;&amp; key!=&quot;patchLines&quot;&amp;&amp;key!=&quot;properties&quot;&amp;&amp;key!=&quot;lines&quot;) {
    	    if(object.containsKey(key)) {
      	    object[key] = val;
    		}  	
    	}
   }
	log.info(vars.get(&apos;Counter&apos;));
	def LineData = new File(&quot;C:/LoadScenarios_Payload/QA/LineData.json&quot;).getText();
     def line = jsonSlurper.parseText(LineData);
	object.lines.add(line);
     line.lineNumber=counter*10;
     line.lineId=lineIds[counter-1];
     line.id=lineIds[counter-1];
     log.info(vars.get(&apos;Counter&apos;));
     def requestBody=new groovy.json.JsonBuilder(object).toPrettyString();
     log.info(vars.get(&apos;Counter&apos;));
     vars.put(&quot;AddProductRequest&quot;,requestBody);
     vars.remove(&quot;UpdateItemPrice&quot;);
     vars.remove(&quot;UpdateItemPriceResponseData&quot;);
}



</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">SUAddProduct</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.successonly">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <stringProp name="FileSaver.variablename">AddProductResponseData</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} AddProduct Seq8 setRate1" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${SetRatePayload}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/quotations/pricing/sparse/set-rate</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.services.FileServer

def counter=vars.get(&quot;Counter&quot;) as int;
def payload = new File(&quot;C:/LoadScenarios_Payload/QA/SetRateRequestBody.json&quot;).getText();
def setRateLinePayload=new File(&quot;C:/LoadScenarios_Payload/QA/SetRateLineData1.json&quot;).getText();
def jsonSlurper = new JsonSlurper()
def object = jsonSlurper.parseText(payload)
def setRateLineDataObject=jsonSlurper.parseText(setRateLinePayload);

def docID = vars.get(&quot;documentId&quot;) as String;
def revisonLanguage = &quot;-0-en-Us&quot;;
object.cacheKey = docID+revisonLanguage;

if(counter==1){
	def guid=UUID.randomUUID().toString();
	List&lt;String&gt; guidIds = new ArrayList()
	guidIds.add(guid);
	vars.putObject(&quot;LineIds&quot;,guidIds);
	setRateLineDataObject.philipsLineId=guid;
	}
else{
	def guid=UUID.randomUUID().toString();
	List&lt;String&gt; guidIds = vars.getObject(&quot;LineIds&quot;);
	guidIds.add(guid);
	vars.putObject(&quot;LineIds&quot;,guidIds);
	setRateLineDataObject.philipsLineId=guid;
	}
def linesPricingCommand={};
object.pricingDocument.linesEnvironments.add(setRateLineDataObject);
object.linesPricingCommands.add(linesPricingCommand);
object.pricingDocument.headerEnvironment.storageKeyInfo.documentId=vars.get(&quot;documentId&quot;) as String;
def requestBody=new groovy.json.JsonBuilder(object).toPrettyString();
vars.put(&quot;SetRatePayload&quot;,requestBody);
</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ChangePrice" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} ChangeItemPrice Seq1 setRate" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${SetRatePayload}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/quotations/pricing/sparse/set-rate</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.services.FileServer
def payload = new File(&quot;C:/LoadScenarios_Payload/QA/SetRateRequestBody.json&quot;).getText();
def setRateLinePayload=new File(&quot;C:/LoadScenarios_Payload/QA/SetRateLineData1.json&quot;).getText();
def jsonSlurper = new JsonSlurper()
def object = jsonSlurper.parseText(payload)
def setRateLineDataObject=jsonSlurper.parseText(setRateLinePayload);

def docID = vars.get(&quot;documentId&quot;) as String;
def revisonLanguage = &quot;-0-en-Us&quot;;
object.cacheKey = docID+revisonLanguage;

def counter=vars.get(&quot;Counter&quot;) as int;
List&lt;String&gt; lineIds = vars.getObject(&quot;LineIds&quot;);
for(int i=0;i&lt;counter;i++){
      def pricingCommandPayload= new File(&quot;C:/LoadScenarios_Payload/QA/SetRatePricingCommandData.json&quot;).getText();
      def pricingCommandData=jsonSlurper.parseText(pricingCommandPayload);
	 object.pricingDocument.linesEnvironments.add(setRateLineDataObject);
	 object.linesPricingCommands.add(pricingCommandData);
	 setRateLineDataObject.philipsLineId=lineIds[counter-1];
}
object.pricingDocument.headerEnvironment.storageKeyInfo.documentId=vars.get(&quot;documentId&quot;) as String;
def requestBody=new groovy.json.JsonBuilder(object).toPrettyString();
vars.put(&quot;SetRatePayload&quot;,requestBody);
</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} ChangeItemPrice Seq2 ChangeQuotation" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${UpdateItemPrice}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/quotations/</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">version2</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.version</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">3000</stringProp>
                </ConstantTimer>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="changeItem Preprocessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.services.FileServer
log.info(&quot;result&quot;);
def AddProductResponseData = new File(vars.get(&quot;AddProductResponseData&quot;)).getText();
def jsonSlurper = new JsonSlurper()
def object = jsonSlurper.parseText(vars.get(&quot;AddProductRequest&quot;))
def AddProductResponseObject=jsonSlurper.parseText(AddProductResponseData);
object.priceIsOutdated=false;
AddProductResponseObject.each { key, val -&gt;
    if(key != &quot;metaData&quot;&amp;&amp;key!=&quot;properties&quot;&amp;&amp;key!=&quot;lines&quot;) {
    	if(object.containsKey(key)) {
      	object[key] = val;
    		}  	
    	}
}
def counter=vars.get(&apos;Counter&apos;) as int;
def pricingCommandPayload= new File(&quot;C:/LoadScenarios_Payload/QA/PricingCommand.json&quot;).getText();
def pricingCommandData=jsonSlurper.parseText(pricingCommandPayload);


object.lines[counter-1].pricingCommands.add(pricingCommandData);
def requestBody=new groovy.json.JsonBuilder(object).toPrettyString();
vars.put(&quot;UpdateItemPrice&quot;,requestBody);
vars.remove(&quot;AddProductRequest&quot;);
vars.remove(&quot;AddProductResponseData&quot;);</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">SalesUpdateItemPrice</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.successonly">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <stringProp name="FileSaver.variablename">UpdateItemPriceResponseData</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
            </hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">300</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">Counter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime" enabled="true"/>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">50000</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                  <stringProp name="RandomTimer.range">100</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} ChangeItemPrice Seq3 QuoteQL" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;query&quot;: &quot;query { quotes { quote(documentVersion: {documentId: \&quot;${documentId}\&quot;, revision: 0}) { versionEquals(version: \&quot;${version2}\&quot; ) } } } &quot;,&#xd;
    &quot;variables&quot;: {}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PrintQuote" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} PrintQuote Seq1 Approvals" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;query&quot;: &quot;query getApprovalBundle($documentId: String!, $revision: Int!) {\n        approvals {\n          approvalBundle(documentVersion: {documentId: $documentId, revision: $revision}) {\n            status\n          }\n        }\n      }&quot;,&#xd;
    &quot;variables&quot;: {&#xd;
        &quot;documentId&quot;: &quot;${documentId}&quot;,&#xd;
        &quot;revision&quot;: 0&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">3000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} PrintQuote Seq2 getTemplates" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;SalesArea&quot;:&quot;NL01/05/01&quot;,&quot;SalesDocumentType&quot;:&quot;ZQU&quot;,&quot;PriceProcedure&quot;:&quot;ZVI201&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/ext/etoBooklet/getTemplates</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SalesUser_1_ ${UserCounter} PrintQuote" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;quoteId&quot;:&quot;${documentId}&quot;,&quot;revisionId&quot;:0,&quot;language&quot;:&quot;en-GB&quot;,&quot;templateFile&quot;:&quot;ATO_2_COMM&quot;,&quot;options&quot;:&quot;^--=true^OPTA=true^OPTB=true^OPTC=true^OPTD=true^OPTE=true^OPTF=true^-=true^BrutoPrice=true^HidePrices=true^Docx=true^PDF=false^&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/ext/etoBooklet/create/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">300</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">UserCounter</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ArchiveQuote" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} Archive Quote HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;selectedQuotations&quot;: [&#xd;
        {&#xd;
            &quot;documentId&quot;: &quot;${documentId}&quot;,&#xd;
            &quot;revision&quot;: 0&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/quotations/selected/archive/</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ManagerUser" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">60</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load QuoteOverViewPage" enabled="true"/>
        <hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Load QuoteOverViewPage" enabled="true">
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} Load QuoteOverViewPage Seq1 QuoteQL1 " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;query { roles { all { id name members { id } claims { claimType: type claimValue: value } } } } &quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} Load QuoteOverViewPage Seq1 Status " enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/resources/Quote/Status</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} Load QuoteOverViewPage Seq2 QuoteQL2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetLicense&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query GetLicense {\n  license {\n    demo\n    invalid\n    violated\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} Load QuoteOverViewPage Seq3 QuoteQL3" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;query search ( $expressions: ExpressionsInput, $paging: PageInput!, $orderBy: [OrderByInput], $priceLineStepIds: [String!] ) { quotes { groupedRevisions ( paging: $paging orderBy:$orderBy expressions:$expressions ) { ...documentRevisionGroupWithPriceCalculation } } } fragment documentRevisionGroupWithPriceCalculation on DocumentRevisionGroupsPayload { pageInfo { totalCount } items { ...documentRevisionGroupItemWithPriceCalculation } } fragment documentRevisionGroupItemWithPriceCalculation on DocumentRevisionsGroup { priceIsOutdated autoUpdatePrices currency totalNetValue ownerUserName owner { id name } documentId title status soldToCompanyName latestRevision archived quickRefs isProcessing erpDocumentIds crmOpportunityIds linesCount salesAreaName salesAreaId modifiedDate validTo expirationDate: validTo createdDate approvalStatus hasApprovalRuleSet revisions { hasSystemLines customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } archived erpDocumentId validTo expirationDate: validTo documentId revision ownerUserName owner { id name } status title quickRef createdDate modifiedDate createdBy creator { id name } modifiedBy modifier { id name } locked currency totalNetValue totalTaxValue autoUpdatePrices salesArea { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } id distributionChannel localCurrency name salesDivision salesOrganization currency } isProcessing processingStartedBy crmOpportunityId approvalStatus linesCount approvalBundle { bundleId requestedBy { name id } requesterComment locked status } language soldTo { partner { ...partnerItem } hierarchy { partnerRole companyName street zip city state countryCode accountGroup isSalesAreaDependent website phone fax externalId vatRegNo addressNumber integrationId parentId partnerId } } showPrices priceCalculation { priceLines(stepIds: $priceLineStepIds) { stepId id conditionValue } basePrice invalidMessage isValid netValue subTotal taxValue totalDiscount totalPrice unitBasePrice } } } fragment partnerItem on Partner { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } partnerRole defaultPartnerRoles companyName street zip city state countryCode accountGroup isSalesAreaDependent website phone fax externalId vatRegNo addressNumber integrationId parentId partnerId contactPerson { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } title firstName lastName email phone fax externalId personNumber } salesAreaData { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } salesOrganization distributionChannel salesDivision salesDistrict { text value } salesOffice salesGroup customerGroup currency priceGroup priceList shippingConditions plant incoTerms1 incoTerms2 paymentTerms customerPricingProcedure exchangeRateType relevantForRebate } }&quot;,&quot;variables&quot;:{&quot;paging&quot;:{&quot;page&quot;:0,&quot;perPage&quot;:50},&quot;orderBy&quot;:[{&quot;field&quot;:&quot;ModifiedDate&quot;,&quot;order&quot;:&quot;Descending&quot;}],&quot;expressions&quot;:{&quot;term&quot;:{&quot;field&quot;:&quot;Deleted&quot;,&quot;comparisonType&quot;:&quot;Equal&quot;,&quot;value&quot;:&quot;false&quot;},&quot;subExpressions&quot;:[{&quot;term&quot;:{&quot;field&quot;:&quot;OwnerUserName&quot;,&quot;comparisonType&quot;:&quot;Equal&quot;,&quot;value&quot;:&quot;7876890b-6cb0-d30c-f29d-40189ac600a4&quot;},&quot;subExpressions&quot;:null,&quot;operator&quot;:&quot;And&quot;}],&quot;operator&quot;:&quot;And&quot;},&quot;priceLineStepIds&quot;:[&quot;440.00&quot;,&quot;500.00&quot;,&quot;981.00&quot;,&quot;605.00&quot;,&quot;600.00&quot;,&quot;449.00&quot;,&quot;590.00&quot;,&quot;700.00&quot;]}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CopyQuote" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} copyQuote" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;query&quot;: &quot;mutation copyQuote($documentId: String!, $revision: Int!) { quotes { copy(documentVersion: {documentId: $documentId, revision: $revision}) { ...documentRevisionGroupItem } } } fragment documentRevisionGroupItem on DocumentRevisionsGroup { priceIsOutdated autoUpdatePrices currency totalNetValue ownerUserName owner { id name } documentId title status soldToCompanyName latestRevision archived quickRefs isProcessing erpDocumentIds crmOpportunityIds linesCount salesAreaName salesAreaId modifiedDate validTo expirationDate: validTo createdDate approvalStatus hasApprovalRuleSet revisions { hasSystemLines customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } archived erpDocumentId validTo expirationDate: validTo documentId revision ownerUserName owner { id name } status title quickRef createdDate modifiedDate createdBy creator { id name } modifiedBy modifier { id name } locked currency totalNetValue totalTaxValue autoUpdatePrices salesArea { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } id distributionChannel localCurrency name salesDivision salesOrganization currency } isProcessing processingStartedBy crmOpportunityId approvalStatus linesCount approvalBundle { bundleId requestedBy { name id } requesterComment locked status } language soldTo { partner { ...partnerItem } hierarchy { partnerRole companyName street zip city state countryCode accountGroup isSalesAreaDependent website phone fax externalId vatRegNo addressNumber integrationId parentId partnerId } } showPrices } } fragment partnerItem on Partner { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } partnerRole defaultPartnerRoles companyName street zip city state countryCode accountGroup isSalesAreaDependent website phone fax externalId vatRegNo addressNumber integrationId parentId partnerId contactPerson { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } title firstName lastName email phone fax externalId personNumber } salesAreaData { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } salesOrganization distributionChannel salesDivision salesDistrict { text value } salesOffice salesGroup customerGroup currency priceGroup priceList shippingConditions plant incoTerms1 incoTerms2 paymentTerms customerPricingProcedure exchangeRateType relevantForRebate } }&quot;,&#xd;
    &quot;variables&quot;: {&#xd;
        &quot;documentId&quot;: &quot;${quoteId}&quot;,&#xd;
        &quot;revision&quot;: 0&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">CopyQuoteData</stringProp>
              <boolProp name="FileSaver.errorsonly">false</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <stringProp name="FileSaver.variablename">CopyQuoteData</stringProp>
            </ResultSaver>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">documentId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..documentId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/resources/Quote/Status</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.services.FileServer


def jsonSlurper = new JsonSlurper()
def payload = new File(vars.get(&quot;CopyQuoteData&quot;)).getText();
def object = jsonSlurper.parseText(payload);
def documentId=object.data.quotes.copy.documentId as String;
vars.putObject(&quot;documentId&quot;,documentId);
log.info(&quot;Quote copied&quot;);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="OpenQuote" enabled="true"/>
        <hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="OpenQuoteFromQuotesOverviewPage" enabled="true">
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} OpenQuote Seq1 templates" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/templates/</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">5000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} OpenQuote Seq1 featureModels" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/featureModels/</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} OpenQuote Seq1 QuoteQL1" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;query&quot;: &quot;query ($querystring: String, $paging: PageInput!) { systems { systems(querystring: $querystring, paging: $paging) { items { id name productId productGroupId location description salesAreas image customRequestData { key valuePath } } pageInfo { count currentPage hasNextPage hasPreviousPage pageCount perPage totalCount } } } } &quot;,&#xd;
    &quot;variables&quot;: {&#xd;
        &quot;paging&quot;: {&#xd;
            &quot;page&quot;: 0,&#xd;
            &quot;perPage&quot;: 50&#xd;
        },&#xd;
        &quot;querystring&quot;: null&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">5000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} OpenQuote Seq1 /api/quotations/${documentId}?revision=0" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="revision" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">revision</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/quotations/${documentId}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} OpenQuote Seq1 QuoteQL2" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;operationName&quot;: &quot;GetBreadcrumbsQuickRef&quot;,&#xd;
    &quot;query&quot;: &quot;query GetBreadcrumbsQuickRef($id: String!, $revision: Int!) {\n  quotes {\n    quote(documentVersion: {documentId: $id, revision: $revision}) {\n      id\n      quickRef\n      title\n      __typename\n    }\n    __typename\n  }\n}\n&quot;,&#xd;
    &quot;variables&quot;: {&#xd;
        &quot;id&quot;: &quot;${documentId}&quot;,&#xd;
        &quot;revision&quot;: 0&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} OpenQuote Seq1 QuoteQL3" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;query&quot;: &quot;query getQuote( $documentVersion: DocumentVersionInput! ) { quotes { quote( documentVersion: $documentVersion ) { owner { id name } } } } &quot;,&#xd;
    &quot;variables&quot;: {&#xd;
        &quot;documentVersion&quot;: {&#xd;
            &quot;documentId&quot;: &quot;${documentId}&quot;,&#xd;
            &quot;revision&quot;: 0&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} OpenQuote Seq2 GetBomItemsEnvironmentInfo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;salesAreaId&quot;:&quot;NL01/05/01&quot;,&quot;name&quot;:&quot;000441134108781&quot;,&quot;plant&quot;:&quot;LM01&quot;,&quot;usage&quot;:&quot;5&quot;,&quot;salesAreaName&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;soldTo&quot;:&quot;31002737&quot;,&quot;shipTo&quot;:&quot;31002737&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/material/GetBomItemsEnvironmentInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} OpenQuote Seq3 getBomItemsStatusForConfiguration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;environment&quot;: {&#xd;
        &quot;materialEnvironment&quot;: [&#xd;
        ],&#xd;
        &quot;rootEnvironment&quot;: {&#xd;
            &quot;salesArea&quot;: {&#xd;
                &quot;distributionChannel&quot;: &quot;05&quot;,&#xd;
                &quot;salesOrganization&quot;: &quot;NL01&quot;&#xd;
            },&#xd;
            &quot;salesDocumentType&quot;: &quot;ZQU&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;existingConfigurations&quot;: [&#xd;
        {&#xd;
            &quot;name&quot;: &quot;000441134108781&quot;,&#xd;
            &quot;plant&quot;: &quot;LM01&quot;,&#xd;
            &quot;rootConfiguration&quot;: {&#xd;
                &quot;bomItemAssignments&quot;: [&#xd;
                ],&#xd;
                &quot;configurableMaterialName&quot;: &quot;000441134108781&quot;,&#xd;
                &quot;existingAssignments&quot;: [&#xd;
                ],&#xd;
                &quot;itemId&quot;: &quot;&quot;,&#xd;
                &quot;materialName&quot;: &quot;000441134108781&quot;&#xd;
            },&#xd;
            &quot;salesAreaId&quot;: &quot;NL01/05/01&quot;,&#xd;
            &quot;salesAreaName&quot;: &quot;Signify the Netherlands - Projects&quot;,&#xd;
            &quot;shipTo&quot;: &quot;31002737&quot;,&#xd;
            &quot;soldTo&quot;: &quot;31002737&quot;,&#xd;
            &quot;usage&quot;: &quot;5&quot;&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/material/getBomItemsStatusForConfiguration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="OpenQuoteFromQuotesOverviewPage" enabled="true">
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} OpenQuote Seq4 QuoteQL" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;query&quot;: &quot;query getApprovalConstraints($documentId: String!, $revision: Int!, $salesAreaId: String!) { approvals { approvalsEnabled: approvalsEnabled(salesAreaId: $salesAreaId) printingAllowed: isFeatureAllowed(documentVersion: {documentId: $documentId, revision: $revision}, feature: Printing), sapUploadAllowed: isFeatureAllowed(documentVersion: {documentId: $documentId, revision: $revision}, feature: SapUpload) } } &quot;,&#xd;
    &quot;variables&quot;: {&#xd;
        &quot;documentId&quot;: &quot;${documentId}&quot;,&#xd;
        &quot;revision&quot;: 0,&#xd;
        &quot;salesAreaId&quot;: &quot;NL01/05/01&quot;&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} OpenQuote Seq4 materialInfo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;materials&quot;: [&#xd;
        {&#xd;
            &quot;cacheKey&quot;: &quot;000441134108781$Signify the Netherlands - Projects$31002737$31002737$LM01&quot;,&#xd;
            &quot;materialName&quot;: &quot;000441134108781&quot;,&#xd;
            &quot;rootBomPlant&quot;: &quot;LM01&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;salesAreaId&quot;: &quot;NL01/05/01&quot;,&#xd;
    &quot;salesAreaName&quot;: &quot;Signify the Netherlands - Projects&quot;,&#xd;
    &quot;shipTo&quot;: &quot;31002737&quot;,&#xd;
    &quot;soldTo&quot;: &quot;31002737&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/materialinfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} OpenQuote Seq4 csvTemplate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;SalesDocumentType&quot;:&quot;ZQU&quot;,&quot;SalesOrganization&quot;:&quot;NL01&quot;,&quot;SalesDistributionChannel&quot;:&quot;05&quot;,&quot;SalesDivision&quot;:&quot;01&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/output/csv/templates/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} OpenQuote Seq4 xpsTemplate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;SalesDocumentType&quot;:&quot;ZQU&quot;,&quot;SalesOrganization&quot;:&quot;NL01&quot;,&quot;SalesDistributionChannel&quot;:&quot;05&quot;,&quot;SalesDivision&quot;:&quot;01&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/output/print/templates/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="OpenApprovalPage" enabled="true"/>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} OpenApprovalPage QuoteQL" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;query&quot;: &quot;query getApprovalBundle ( $documentId: String!, $revision: Int! ) { approvals { approvalBundle ( documentVersion: { documentId: $documentId, revision: $revision } ) { ...Approval } } } fragment Approval on ApprovalBundle { bundleId status locked requestedBy { name, id } requesterComment approvals { id actor { name id } status comment approvalGroups { name users{ name id } } canApprove canReject canView description priority startDate actDate scope scopeAdditionalData scopeId summaryFields { property name value } isAutoReapproval hasAutoReapprovalSupport } }&quot;,&#xd;
    &quot;variables&quot;: {&#xd;
        &quot;documentId&quot;: &quot;${documentId}&quot;,&#xd;
        &quot;revision&quot;: 0&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">ApprovalsResponseBody</stringProp>
              <boolProp name="FileSaver.errorsonly">false</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <stringProp name="FileSaver.variablename">ApprovalsResponseBody</stringProp>
            </ResultSaver>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RaiseApprovalRequest" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} RaiseApprovalRequest RaiseApprovalRequest" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;query&quot;: &quot;mutation beginApprovalBundle( $documentId: String!, $revision: Int!, $comment: String! ) { approvals { begin( documentVersion: { documentId: $documentId, revision: $revision }, comment: $comment ) { ...Approval } } } fragment Approval on ApprovalBundle { bundleId status locked requestedBy { name, id } requesterComment approvals { id actor { name id } status comment approvalGroups { name users{ name id } } canApprove canReject canView description priority startDate actDate scope scopeAdditionalData scopeId summaryFields { property name value } isAutoReapproval hasAutoReapprovalSupport } }&quot;,&#xd;
    &quot;variables&quot;: {&#xd;
        &quot;comment&quot;: &quot;&quot;,&#xd;
        &quot;documentId&quot;: &quot;${documentId}&quot;,&#xd;
        &quot;revision&quot;: 0&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">ApprovalRequestResponse</stringProp>
              <boolProp name="FileSaver.errorsonly">false</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <stringProp name="FileSaver.variablename">ApprovalRequest</stringProp>
            </ResultSaver>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Approve/RejectRequest" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} ApprovalRequest Accept" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;query&quot;: &quot;mutation beginApprovalBundle ( $documentId: String!, $revision: Int!, $approvalId: String!, $comment: String!, $allowAutoReapproval: Boolean! ) { approvals { approve ( documentVersion:{ documentId: $documentId, revision: $revision }, approvalId: $approvalId, comment: $comment, allowAutoReapproval: $allowAutoReapproval ) { ...Approval } } } fragment Approval on ApprovalBundle { bundleId status locked requestedBy { name, id } requesterComment approvals { id actor { name id } status comment approvalGroups { name users{ name id } } canApprove canReject canView description priority startDate actDate scope scopeAdditionalData scopeId summaryFields { property name value } isAutoReapproval hasAutoReapprovalSupport } }&quot;,&#xd;
    &quot;variables&quot;: {&#xd;
        &quot;allowAutoReapproval&quot;: true,&#xd;
        &quot;approvalId&quot;: &quot;${ApprovalId}&quot;,&#xd;
        &quot;comment&quot;: &quot;&quot;,&#xd;
        &quot;documentId&quot;: &quot;${documentId}&quot;,&#xd;
        &quot;revision&quot;: 0&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Approve PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.services.FileServer
     
	def jsonSlurper = new JsonSlurper()
	def payload = new File(vars.get(&quot;ApprovalRequest&quot;)).getText();
     def object = jsonSlurper.parseText(payload);
     def id=object.data.approvals.begin.approvals[0].id as String;
     vars.putObject(&quot;ApprovalId&quot;,id);


</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PrintQuote" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} BacktoQuote QuoteQL" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;query&quot;:&quot;query { quotes { quote(documentVersion: {documentId: \&quot;${documentId}\&quot;, revision: 0}) { versionEquals(version: \&quot;${version5}\&quot; ) } } } &quot;,&quot;variables&quot;:{}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} BacktoQuote QuoteQL" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;query&quot;: &quot;query getApprovalBundle ( $documentId: String!, $revision: Int! ) { approvals { approvalBundle ( documentVersion: { documentId: $documentId, revision: $revision } ) { ...Approval } } } fragment Approval on ApprovalBundle { bundleId status approvals { id actor { name id } status actDate } }&quot;,&#xd;
    &quot;variables&quot;: {&#xd;
        &quot;documentId&quot;: &quot;${documentId}&quot;,&#xd;
        &quot;revision&quot;: 0&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} PrintQuote Seq1 Approvals" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;query&quot;: &quot;query getApprovalBundle($documentId: String!, $revision: Int!) {\n        approvals {\n          approvalBundle(documentVersion: {documentId: $documentId, revision: $revision}) {\n            status\n          }\n        }\n      }&quot;,&#xd;
    &quot;variables&quot;: {&#xd;
        &quot;documentId&quot;: &quot;${documentId}&quot;,&#xd;
        &quot;revision&quot;: 0&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} PrintQuote Seq2 getTemplates" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;SalesArea&quot;:&quot;NL01/05/01&quot;,&quot;SalesDocumentType&quot;:&quot;ZQU&quot;,&quot;PriceProcedure&quot;:&quot;ZVI201&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/ext/etoBooklet/getTemplates</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ManagerUser_1_ ${UserCounter} PrintQuote" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;quoteId&quot;:&quot;${documentId}&quot;,&quot;revisionId&quot;:0,&quot;language&quot;:&quot;en-GB&quot;,&quot;templateFile&quot;:&quot;ATO_2_COMM&quot;,&quot;options&quot;:&quot;^--=true^OPTA=true^OPTB=true^OPTC=true^OPTD=true^OPTE=true^OPTF=true^-=true^BrutoPrice=true^HidePrices=true^Docx=true^PDF=false^&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/ext/etoBooklet/create/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">300</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">UserCounter</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ArchiveQuote" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson_1_ ${UserCounter} Archive Quote HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;selectedQuotations&quot;: [&#xd;
        {&#xd;
            &quot;documentId&quot;: &quot;${documentId}&quot;,&#xd;
            &quot;revision&quot;: 0&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/quotations/selected/archive/</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="version" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetQuoteVersion" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/settings</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">appVersion</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.appVersion</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.appVersion</stringProp>
            <stringProp name="EXPECTED_VALUE">11.2.9
</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1263780431">appVersion:11.1.7</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">C:\Production5UsersLoadTest.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">acc.quote.signify.com</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        <stringProp name="HTTPSampler.connect_timeout">60000000000</stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">accept</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">authorization</stringProp>
            <stringProp name="Header.value">Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJzaWduaWZ5LXdhcm11cEBjb25maWdpdC5jbG91ZCIsImlzcyI6ImNvbmZpZ2l0and0IiwiYXVkIjoiY29uZmlnaXRqd3QiLCJ1c2VyX2VtYWlsIjoic2lnbmlmeS13YXJtdXBAY29uZmlnaXQuY2xvdWQiLCJleHAiOjE2NzIzOTY0ODJ9.pXfBl23qF-EnMJ2TeEMu0SbaqGlYhvUfOpHG1T-4Tho</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">content-type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">false</boolProp>
        <boolProp name="useExpires">true</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="quoteId" elementType="Argument">
            <stringProp name="Argument.name">quoteId</stringProp>
            <stringProp name="Argument.value">47e917c0-702e-4110-bc52-d91581c51c10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">for qa  f7670c1a-a0b4-443a-8395-827eeea7c438</stringProp>
          </elementProp>
          <elementProp name="token" elementType="Argument">
            <stringProp name="Argument.name">token</stringProp>
            <stringProp name="Argument.value">Bearer c</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Bearer </stringProp>
          </elementProp>
          <elementProp name="" elementType="Argument">
            <stringProp name="Argument.name"></stringProp>
            <stringProp name="Argument.value">signify-qq0-staging.azurewebsites.net</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="" elementType="Argument">
            <stringProp name="Argument.name"></stringProp>
            <stringProp name="Argument.value">signify-quote-qa.configit.cloud</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="" elementType="Argument">
            <stringProp name="Argument.name"></stringProp>
            <stringProp name="Argument.value">1f55faba-ecfd-4d23-bb82-d93ce93a34c9 </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Quote - 12.1.3" elementType="Argument">
            <stringProp name="Argument.name">Quote - 12.1.3</stringProp>
            <stringProp name="Argument.value">qsignify-qa.configit.cloud</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">qsignify-qq1-staging.azurewebsites.net</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.HitsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Hits per Second" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">60000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TimesVsThreadsGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times vs Threads" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">true</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">30000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Testing" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CreateQuote" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} CreateQuote Seq1 Quotations " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;title&quot;:&quot;BackOfficePersonaLoadTest&quot;,&quot;salesAreaName&quot;:&quot;Signify the Netherlands - Projects&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/quotations/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">documentId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">version</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.version</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="CreateQuoteFromQuotesOverviewPage" enabled="true">
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} CreateQuote Seq2 QuoteQL1 " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{&quot;id&quot;:&quot;${documentId}&quot;,&quot;revision&quot;:&quot;0&quot;},&quot;query&quot;:&quot;query ($id: String!, $revision: Int!) {  quotes {  quote(documentVersion: {documentId: $id, revision: $revision}) {  id  quickRef  title  __typename  }  __typename  } } &quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} CreateQuote Seq2 templates " enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/templates/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} CreateQuote Seq2 featureModels " enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/featureModels/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} CreateQuote Seq2 QuoteQL2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;query ($querystring: String, $paging: PageInput!) { systems { systems(querystring: $querystring, paging: $paging) { items { id name productId productGroupId location description salesAreas image customRequestData { key valuePath } } pageInfo { count currentPage hasNextPage hasPreviousPage pageCount perPage totalCount } } } } &quot;,&quot;variables&quot;:{&quot;querystring&quot;:null,&quot;paging&quot;:{&quot;page&quot;:0,&quot;perPage&quot;:50}}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} CreateQuote Seq2 /api/quotations/{QuoteId}/  " enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="revision" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">revision</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/quotations/${documentId}/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">QuotePayload</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.quote</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} CreateQuote Seq2 QuoteQL3" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;query getQuote( $documentVersion: DocumentVersionInput! ) { quotes { quote( documentVersion: $documentVersion ) { owner { id name } } } } &quot;,&quot;variables&quot;:{&quot;documentVersion&quot;:{&quot;documentId&quot;:&quot;${documentId}&quot;,&quot;revision&quot;:&quot;0&quot;}}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} CreateQuote Seq3 GetBomItemsEnvironmentInfo " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/material/GetBomItemsEnvironmentInfo</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} CreateQuote Seq4 getBomItemsStatusForConfiguration " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;environment&quot;:{&quot;rootEnvironment&quot;:{&quot;salesArea&quot;:{&quot;salesOrganization&quot;:&quot;NL01&quot;,&quot;distributionChannel&quot;:&quot;05&quot;},&quot;salesDocumentType&quot;:&quot;ZQU&quot;},&quot;materialEnvironment&quot;:[]},&quot;existingConfigurations&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/material/getBomItemsStatusForConfiguration</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="CreateQuoteFromQuotesOverviewPage" enabled="true">
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} CreateQuote Seq5 QuoteQL4 " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;query getApprovalConstraints($documentId: String!, $revision: Int!, $salesAreaId: String!) { approvals { approvalsEnabled: approvalsEnabled(salesAreaId: $salesAreaId) printingAllowed: isFeatureAllowed(documentVersion: {documentId: $documentId, revision: $revision}, feature: Printing), sapUploadAllowed: isFeatureAllowed(documentVersion: {documentId: $documentId, revision: $revision}, feature: SapUpload) } } &quot;,&quot;variables&quot;:{&quot;documentId&quot;:&quot;${documentId}&quot;,&quot;revision&quot;:0,&quot;salesAreaId&quot;:&quot;NL01/05/01&quot;}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} CreateQuote Seq5 /api/output/csv/templates/ " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;SalesDocumentType&quot;:&quot;ZQU&quot;,&quot;SalesOrganization&quot;:&quot;NL01&quot;,&quot;SalesDistributionChannel&quot;:&quot;05&quot;,&quot;SalesDivision&quot;:&quot;01&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/output/csv/templates/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} CreateQuote Seq5 /api/output/xps/templates/ " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;SalesDocumentType&quot;:&quot;ZQU&quot;,&quot;SalesOrganization&quot;:&quot;NL01&quot;,&quot;SalesDistributionChannel&quot;:&quot;05&quot;,&quot;SalesDivision&quot;:&quot;01&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/output/xps/templates</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="OpenCustomerPage" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">30000</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="OpenCustomerPage" enabled="true">
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} OpenCustomerPage Seq1 QuoteQL1 " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;query countriesInWhichUserHaveAccess ($search: String, $salesAreaName: String, $partnerRole: String) { permissions { countryCode(filter: $search, salesAreaNameOrId: $salesAreaName, partnerRole: $partnerRole, paging: {page: 0, perPage: 50}) { hasMore items { value text } } } } &quot;,&quot;variables&quot;:{&quot;salesAreaName&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;partnerRole&quot;:&quot;AG&quot;}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} OpenCustomerPage Seq1 QuoteQL2 " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;query salesDistrictsInWhichUserHaveAccess ($search: String) { permissions { salesDistricts(filter: $search, paging: {page: 0, perPage: 50}) { hasMore items { value text } } } } &quot;,&quot;variables&quot;:{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} OpenCustomerPage Seq1 QuoteQL3 " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;query getPartnersList($filter: PartnerFilterInput, $paging: PageInput) { partners { partners(filter:$filter, paging:$paging) { hasMore items{ ...partnerItem } } } } fragment partnerItem on Partner { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } partnerRole defaultPartnerRoles companyName street zip city state countryCode accountGroup isSalesAreaDependent website phone fax externalId vatRegNo addressNumber integrationId parentId partnerId contactPerson { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } title firstName lastName email phone fax externalId personNumber } salesAreaData { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } salesOrganization distributionChannel salesDivision salesDistrict { text value } salesOffice salesGroup customerGroup currency priceGroup priceList shippingConditions plant incoTerms1 incoTerms2 paymentTerms customerPricingProcedure exchangeRateType relevantForRebate } }&quot;,&quot;variables&quot;:{&quot;filter&quot;:{&quot;salesArea&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;searchTerm&quot;:&quot;&quot;,&quot;partnerRole&quot;:&quot;AG&quot;},&quot;paging&quot;:{&quot;page&quot;:0,&quot;perPage&quot;:48}}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SearchCustomer" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter}  SearchCustomer" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;query&quot;:&quot;query getPartnersList($filter: PartnerFilterInput, $paging: PageInput) { partners { partners(filter:$filter, paging:$paging) { hasMore items{ ...partnerItem } } } } fragment partnerItem on Partner { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } partnerRole defaultPartnerRoles companyName street zip city state countryCode accountGroup isSalesAreaDependent website phone fax externalId vatRegNo addressNumber integrationId parentId partnerId contactPerson { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } title firstName lastName email phone fax externalId personNumber } salesAreaData { customProperties { key type stringValue dateTimeValue booleanValue integerValue doubleValue jsonValue } salesOrganization distributionChannel salesDivision salesDistrict { text value } salesOffice salesGroup customerGroup currency priceGroup priceList shippingConditions plant incoTerms1 incoTerms2 paymentTerms customerPricingProcedure exchangeRateType relevantForRebate } }&quot;,&quot;variables&quot;:{&quot;filter&quot;:{&quot;salesArea&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;searchTerm&quot;:&quot;72000100&quot;,&quot;partnerRole&quot;:&quot;AG&quot;},&quot;paging&quot;:{&quot;page&quot;:0,&quot;perPage&quot;:48}}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="AddCustomer" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="AddCustomerFromCustomerPage" enabled="true"/>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">10000</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">1000</stringProp>
                <stringProp name="RandomTimer.range">100</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="AddCustomerFromCustomerPage" enabled="true">
              <boolProp name="PARENT_SAMPLE">false</boolProp>
              <intProp name="MAX_THREAD_NUMBER">6</intProp>
              <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
            </com.blazemeter.jmeter.controller.ParallelSampler>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} AddCustomer Seq1 GetPartnerChangeData" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;salesArea&quot;:{&quot;salesOrganization&quot;:&quot;NL01&quot;,&quot;distributionChannel&quot;:&quot;05&quot;,&quot;salesDivision&quot;:&quot;01&quot;},&quot;soldTo&quot;:&quot;31015042&quot;,&quot;shipTo&quot;:null,&quot;materialLines&quot;:[],&quot;salesDocumentType&quot;:&quot;ZQU1&quot;,&quot;customerPricingProcedure&quot;:&quot;1&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/partners/GetPartnerChangeData</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} AddCustomer Seq1 Status" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/resources/Quote/Status</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} AddCustomer Seq1 templates" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/templates/</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} AddCustomer Seq1 featureModels" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/featureModels/</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} AddCustomer Seq1 QuoteQL0" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;query&quot;:&quot;query { roles { all { id name members { id } claims { claimType: type claimValue: value } } } } &quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} AddCustomer Seq1 QuoteQL1" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;query&quot;:&quot;query ($querystring: String, $paging: PageInput!) { systems { systems(querystring: $querystring, paging: $paging) { items { id name productId productGroupId location description salesAreas image customRequestData { key valuePath } } pageInfo { count currentPage hasNextPage hasPreviousPage pageCount perPage totalCount } } } } &quot;,&quot;variables&quot;:{&quot;querystring&quot;:null,&quot;paging&quot;:{&quot;page&quot;:0,&quot;perPage&quot;:50}}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} AddCustomer Seq1 QuoteQL2" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;query&quot;:&quot;query { quotes { quote(documentVersion: {documentId: \&quot;${documentId}\&quot;, revision: 0}) { versionEquals(version: \&quot;${version}\&quot; ) } } } &quot;,&quot;variables&quot;:{}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="AddCustomerFromCustomerPage" enabled="true">
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} AddCustomer Seq2 QuoteQL3" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;query getApprovalConstraints($documentId: String!, $revision: Int!, $salesAreaId: String!) { approvals { approvalsEnabled: approvalsEnabled(salesAreaId: $salesAreaId) printingAllowed: isFeatureAllowed(documentVersion: {documentId: $documentId, revision: $revision}, feature: Printing), sapUploadAllowed: isFeatureAllowed(documentVersion: {documentId: $documentId, revision: $revision}, feature: SapUpload) } } &quot;,&quot;variables&quot;:{&quot;documentId&quot;:&quot;${documentId}&quot;,&quot;revision&quot;:0,&quot;salesAreaId&quot;:&quot;NL01/05/01&quot;}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} AddCustomer Seq2 xpsTemplate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;SalesDocumentType&quot;:&quot;ZQU&quot;,&quot;SalesOrganization&quot;:&quot;NL01&quot;,&quot;SalesDistributionChannel&quot;:&quot;05&quot;,&quot;SalesDivision&quot;:&quot;01&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/output/xps/templates/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} AddCustomer Seq2 csvTemplate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;SalesDocumentType&quot;:&quot;ZQU&quot;,&quot;SalesOrganization&quot;:&quot;NL01&quot;,&quot;SalesDistributionChannel&quot;:&quot;05&quot;,&quot;SalesDivision&quot;:&quot;01&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/output/csv/templates/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} AddCustomer Seq2 Quotation" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${AddCustomerRequest}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/quotations/</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.services.FileServer
log.info(&quot;result&quot;);
def payload = new File(&quot;C:/LoadScenarios_Payload/AddCustomerRequestBody.json&quot;).getText();
def jsonSlurper = new JsonSlurper()
def object = jsonSlurper.parseText(vars.get(&quot;QuotePayload&quot;))
def customerObject= jsonSlurper.parseText(payload);
object.salesDistrict=&quot;NL0204&quot;;
object.salesOffice=&quot;NL70&quot;;
object.customerGroup=&quot;04&quot;;
object.priceGroup=&quot;04&quot;;
object.put(&quot;partners&quot;,customerObject.partners);
object.put(&quot;erpDocumentId&quot;,null);
object.put(&quot;isReadOnly&quot;,false);
object.auditLog=customerObject.auditLog;
object.soldTo=customerObject.soldTo;
object.shipTo=customerObject.shipTo;
object.payer=customerObject.payer;
object.billTo=customerObject.billTo;
def requestBody=new groovy.json.JsonBuilder(object).toPrettyString();
vars.put(&quot;AddCustomerRequest&quot;,requestBody);
vars.remove(&quot;QuotePayload&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
                <stringProp name="JSONPostProcessor.referenceNames">version</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.version</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                <stringProp name="FileSaver.filename">AddCustomerResponseData</stringProp>
                <boolProp name="FileSaver.errorsonly">false</boolProp>
                <boolProp name="FileSaver.successonly">true</boolProp>
                <boolProp name="FileSaver.skipsuffix">false</boolProp>
                <boolProp name="FileSaver.skipautonumber">false</boolProp>
                <stringProp name="FileSaver.variablename">AddCustomerResponseData</stringProp>
              </ResultSaver>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
                <stringProp name="JSONPostProcessor.referenceNames">CustomerData</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..*</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper

def jsonSlurper = new JsonSlurper();
def response = prev.getResponseDataAsString();
vars.put(&quot;CustomerData&quot;, response);</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="AddProductAndChangePrice" enabled="true"/>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">10</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} ProductSearch" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="query" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">000910500458190</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                  </elementProp>
                  <elementProp name="page" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">page</stringProp>
                  </elementProp>
                  <elementProp name="pageSize" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">6</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">pageSize</stringProp>
                  </elementProp>
                  <elementProp name="configurable" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">configurable</stringProp>
                  </elementProp>
                  <elementProp name="language" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">en-GB</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">language</stringProp>
                  </elementProp>
                  <elementProp name="salesOrganization" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">NL01</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">salesOrganization</stringProp>
                  </elementProp>
                  <elementProp name="distributionChannel" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">05</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">distributionChannel</stringProp>
                  </elementProp>
                  <elementProp name="soldTo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">31015042</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">soldTo</stringProp>
                  </elementProp>
                  <elementProp name="shipTo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">31015042</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">shipTo</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/products/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">30000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="AddProduct" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} AddProduct Seq1 materialinfo" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;salesAreaId&quot;:&quot;NL01/05/01&quot;,&quot;salesAreaName&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;soldTo&quot;:null,&quot;shipTo&quot;:null,&quot;materials&quot;:[{&quot;materialName&quot;:&quot;000910500458190&quot;}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/materialinfo</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} AddProduct Seq2 materialinfo" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;salesAreaId&quot;:&quot;NL01/05/01&quot;,&quot;salesAreaName&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;soldTo&quot;:null,&quot;shipTo&quot;:null,&quot;materials&quot;:[{&quot;materialName&quot;:&quot;GD601BI&quot;}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/materialinfo</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} AddProduct Seq3 getMaterialTemplateData" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;name&quot;:&quot;GD601BI&quot;,&quot;plant&quot;:&quot;HU02&quot;,&quot;usage&quot;:&quot;5&quot;,&quot;languages&quot;:[&quot;en-GB&quot;,&quot;en&quot;],&quot;rootConfiguration&quot;:{&quot;existingAssignments&quot;:[{&quot;variableName&quot;:&quot;Info.BRD&quot;,&quot;valueName&quot;:&quot;PHL&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:true,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.PFAM&quot;,&quot;valueName&quot;:&quot;GD601B&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:true,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.LAMPFAM&quot;,&quot;valueName&quot;:&quot;LED17S&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.COLLAMP&quot;,&quot;valueName&quot;:&quot;830&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.TRAFO&quot;,&quot;valueName&quot;:&quot;PSU-E&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.LINEVOLT&quot;,&quot;valueName&quot;:&quot;220-240&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:true,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.OPT&quot;,&quot;valueName&quot;:&quot;MB&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CLRGRP&quot;,&quot;valueName&quot;:&quot;WH-WH&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.PFC&quot;,&quot;valueName&quot;:&quot;GD601B&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CLS&quot;,&quot;valueName&quot;:&quot;CLII&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.NLP&quot;,&quot;valueName&quot;:&quot;1&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CABL&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false}],&quot;itemId&quot;:&quot;&quot;,&quot;materialName&quot;:&quot;000910500458190&quot;,&quot;configurableMaterialName&quot;:&quot;GD601BI&quot;,&quot;bomItemAssignments&quot;:[]},&quot;salesAreaName&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;salesAreaId&quot;:&quot;NL01/05/01&quot;,&quot;soldTo&quot;:null,&quot;shipTo&quot;:null}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/material/getMaterialTemplateData</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} AddProduct Seq4 getFromExistingConfiguration" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;name&quot;:&quot;GD601BI&quot;,&quot;plant&quot;:&quot;HU02&quot;,&quot;usage&quot;:&quot;5&quot;,&quot;languages&quot;:[&quot;en-GB&quot;,&quot;en&quot;],&quot;rootConfiguration&quot;:{&quot;existingAssignments&quot;:[{&quot;variableName&quot;:&quot;Info.BRD&quot;,&quot;valueName&quot;:&quot;PHL&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:true,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.PFAM&quot;,&quot;valueName&quot;:&quot;GD601B&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:true,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.LAMPFAM&quot;,&quot;valueName&quot;:&quot;LED17S&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.COLLAMP&quot;,&quot;valueName&quot;:&quot;830&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.TRAFO&quot;,&quot;valueName&quot;:&quot;PSU-E&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.LINEVOLT&quot;,&quot;valueName&quot;:&quot;220-240&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:true,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.OPT&quot;,&quot;valueName&quot;:&quot;MB&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CLRGRP&quot;,&quot;valueName&quot;:&quot;WH-WH&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.PFC&quot;,&quot;valueName&quot;:&quot;GD601B&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CLS&quot;,&quot;valueName&quot;:&quot;CLII&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.NLP&quot;,&quot;valueName&quot;:&quot;1&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CABL&quot;,&quot;valueName&quot;:&quot;NO&quot;,&quot;updatedValues&quot;:null,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false}],&quot;itemId&quot;:&quot;&quot;,&quot;materialName&quot;:&quot;000910500458190&quot;,&quot;configurableMaterialName&quot;:&quot;GD601BI&quot;,&quot;bomItemAssignments&quot;:[]},&quot;salesAreaName&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;salesAreaId&quot;:&quot;NL01/05/01&quot;,&quot;soldTo&quot;:null,&quot;shipTo&quot;:null,&quot;environment&quot;:{&quot;rootEnvironment&quot;:{&quot;salesArea&quot;:{&quot;salesOrganization&quot;:&quot;NL01&quot;,&quot;distributionChannel&quot;:&quot;05&quot;},&quot;salesDocumentType&quot;:&quot;ZQU&quot;},&quot;materialEnvironment&quot;:[{&quot;name&quot;:&quot;GD601BI&quot;,&quot;environment&quot;:{}}]}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/material/getFromExistingConfiguration</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} AddProduct Seq5 variants" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;lookupData&quot;:{&quot;name&quot;:&quot;GD601BI&quot;,&quot;usage&quot;:&quot;5&quot;,&quot;plant&quot;:&quot;HU02&quot;,&quot;languages&quot;:[&quot;en-GB&quot;,&quot;en&quot;]},&quot;rootItemData&quot;:{&quot;variantMatchingEnabled&quot;:true,&quot;bomItemId&quot;:&quot;&quot;,&quot;materialName&quot;:&quot;GD601BI&quot;,&quot;assignments&quot;:[{&quot;variableName&quot;:&quot;Required.PFC&quot;,&quot;valueName&quot;:&quot;GD601B&quot;,&quot;valueText&quot;:&quot;GD601B - Rim Single Head&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.LAMPFAM&quot;,&quot;valueName&quot;:&quot;LED17S&quot;,&quot;valueText&quot;:&quot;LED17S - LED1700S&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.COLLAMP&quot;,&quot;valueName&quot;:&quot;830&quot;,&quot;valueText&quot;:&quot;830 - 3000K CRI &gt; 80&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.TRAFO&quot;,&quot;valueName&quot;:&quot;PSU-E&quot;,&quot;valueText&quot;:&quot;PSU-E - External fixed driver&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CLS&quot;,&quot;valueName&quot;:&quot;CLII&quot;,&quot;valueText&quot;:&quot;CLII - Class II&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.OPT&quot;,&quot;valueName&quot;:&quot;MB&quot;,&quot;valueText&quot;:&quot;MB - Medium beam&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CLRGRP&quot;,&quot;valueName&quot;:&quot;WH-WH&quot;,&quot;valueText&quot;:&quot;WH-WH - All white&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Required.CABL&quot;,&quot;valueName&quot;:&quot;NA&quot;,&quot;valueText&quot;:&quot;NA - Not applicable&quot;,&quot;isUserAssignment&quot;:false,&quot;isDefault&quot;:true,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.BRD&quot;,&quot;valueName&quot;:&quot;PHL&quot;,&quot;valueText&quot;:&quot;PHL - Philips&quot;,&quot;isUserAssignment&quot;:false,&quot;isDefault&quot;:true,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.PFAM&quot;,&quot;valueName&quot;:&quot;GD601B&quot;,&quot;valueText&quot;:&quot;GD601B - Storeflux 3&quot;,&quot;isUserAssignment&quot;:false,&quot;isDefault&quot;:true,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.NLP&quot;,&quot;valueName&quot;:&quot;1&quot;,&quot;valueText&quot;:&quot;1&quot;,&quot;isUserAssignment&quot;:true,&quot;isDefault&quot;:false,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.LINEVOLT&quot;,&quot;valueName&quot;:&quot;220-240&quot;,&quot;valueText&quot;:&quot;220-240 - 220-240V 50-60Hz&quot;,&quot;isUserAssignment&quot;:false,&quot;isDefault&quot;:true,&quot;exclusion&quot;:false},{&quot;variableName&quot;:&quot;Info.ModelInfo&quot;,&quot;valueName&quot;:&quot;QA2 version: 16.0 (6/4/2018 10:03:05 PM)&quot;,&quot;valueText&quot;:&quot;QA2 version: 16.0 (6/4/2018 10:03:05 PM)&quot;,&quot;isUserAssignment&quot;:false,&quot;isDefault&quot;:true,&quot;exclusion&quot;:false}],&quot;childItemsData&quot;:[],&quot;salesArea&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;plant&quot;:&quot;HU02&quot;,&quot;preferredVariant&quot;:&quot;000000910500458190&quot;},&quot;environment&quot;:{&quot;rootEnvironment&quot;:{&quot;salesArea&quot;:{&quot;salesOrganization&quot;:&quot;NL01&quot;,&quot;distributionChannel&quot;:&quot;05&quot;},&quot;salesDocumentType&quot;:&quot;ZQU&quot;},&quot;materialEnvironment&quot;:[{&quot;name&quot;:&quot;GD601BI&quot;,&quot;environment&quot;:{}}]},&quot;materialSalesArea&quot;:{&quot;salesOrganization&quot;:&quot;NL01&quot;,&quot;distributionChannel&quot;:&quot;05&quot;},&quot;soldTo&quot;:null,&quot;shipTo&quot;:null}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/variants/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} AddProduct Seq6 materialinfo" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;salesAreaId&quot;:&quot;NL01/05/01&quot;,&quot;salesAreaName&quot;:&quot;Signify the Netherlands - Projects&quot;,&quot;soldTo&quot;:null,&quot;shipTo&quot;:null,&quot;materials&quot;:[{&quot;materialName&quot;:&quot;GD601BI&quot;,&quot;rootBomPlant&quot;:&quot;HU02&quot;,&quot;cacheKey&quot;:&quot;GD601BI$Signify the Netherlands - Projects$$$HU02&quot;}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/materialinfo/get</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} AddProduct Seq7 setRate" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${SetRatePayload}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/quotations/pricing/sparse/set-rate</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.services.FileServer

def counter=vars.get(&quot;Counter&quot;) as int;
def payload = new File(&quot;C:/LoadScenarios_Payload/setRateRequestBody.json&quot;).getText();
def setRateLinePayload=new File(&quot;C:/LoadScenarios_Payload/SetRateLineData.json&quot;).getText();
def jsonSlurper = new JsonSlurper()
def object = jsonSlurper.parseText(payload)
def setRateLineDataObject=jsonSlurper.parseText(setRateLinePayload);
if(counter==1){
	def guid=UUID.randomUUID().toString();
	List&lt;String&gt; guidIds = new ArrayList()
	guidIds.add(guid);
	vars.putObject(&quot;LineIds&quot;,guidIds);
	setRateLineDataObject.materialVariant.philipsLineId=guid;
     setRateLineDataObject.materialVariant.id=guid;
	}
else{
	def guid=UUID.randomUUID().toString();
	List&lt;String&gt; guidIds = vars.getObject(&quot;LineIds&quot;);
	guidIds.add(guid);
	vars.putObject(&quot;LineIds&quot;,guidIds);
	setRateLineDataObject.materialVariant.philipsLineId=guid;
	setRateLineDataObject.materialVariant.id=guid;
	}
def linesPricingCommand={};
object.pricingDocument.linesEnvironments.add(setRateLineDataObject);
object.linesPricingCommands.add(linesPricingCommand);
object.pricingDocument.headerEnvironment.storageKeyInfo.documentId=vars.get(&quot;documentId&quot;) as String;
def requestBody=new groovy.json.JsonBuilder(object).toPrettyString();
vars.put(&quot;SetRatePayload&quot;,requestBody);
</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} AddProduct Seq8 Quotation" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${AddProductRequest}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/quotations/</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="AddProductQuotation Preprocessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.services.FileServer

def counter=vars.get(&quot;Counter&quot;) as int;
def jsonSlurper = new JsonSlurper()
List&lt;String&gt; lineIds = vars.getObject(&quot;LineIds&quot;);
if(counter==1){
log.info(vars.get(&quot;CustomerData&quot;));	
def object = jsonSlurper.parseText(vars.get(&quot;AddCustomerRequest&quot;));
//log.info(vars.get(&quot;CustomerData&quot;));
def customResponseObject =  jsonSlurper.parseText(vars.get(&quot;CustomerData&quot;));

//def customResponseObject=jsonSlurper.parseText(customerResponsePayload);
customResponseObject.each { key, val -&gt;
    if(key != &quot;metaData&quot;&amp;&amp; key!=&quot;patchLines&quot;&amp;&amp; key!=&quot;properties&quot;) {
    	if(object.containsKey(key)) {
      	object[key] = val;
    		}  	
    	}
}
def LineData = new File(&quot;C:/LoadScenarios_Payload/LineData.json&quot;).getText();
     def line = jsonSlurper.parseText(LineData);
     log.info(vars.get(&apos;Counter&apos;));
	object.lines.add(line);
	log.info(vars.get(&apos;Counter&apos;));
     object.lines[0].lineId=lineIds[counter-1];
     object.lines[0].id=lineIds[counter-1];
     line.lineNumber=counter*10;
     def requestBody=new groovy.json.JsonBuilder(object).toPrettyString();
      
     vars.put(&quot;AddProductRequest&quot;,requestBody);
     vars.remove(&quot;AddCustomerRequest&quot;);
   //  vars.remove(&quot;AddCustomerResponseData&quot;);
}
else{
	def object=jsonSlurper.parseText(vars.get(&quot;UpdateItemPrice&quot;));
	def UpdateItemPriceResponsePayload = new File(vars.get(&quot;UpdateItemPriceResponseData&quot;)).getText();
     def UpdateItemPriceResponseObject=jsonSlurper.parseText(UpdateItemPriceResponsePayload);
     UpdateItemPriceResponseObject.each { key, val -&gt;
     if(key != &quot;metaData&quot;&amp;&amp; key!=&quot;patchLines&quot;&amp;&amp;key!=&quot;properties&quot;) {
    	    if(object.containsKey(key)) {
      	    object[key] = val;
    		}  	
    	}
   }
	log.info(vars.get(&apos;Counter&apos;));
	def LineData = new File(&quot;C:/LoadScenarios_Payload/LineData.json&quot;).getText();
     def line = jsonSlurper.parseText(LineData);
	object.lines.add(line);
     line.lineNumber=counter*10;
     line.lineId=lineIds[counter-1];
     line.id=lineIds[counter-1];
     
     def requestBody=new groovy.json.JsonBuilder(object).toPrettyString();
      
     	log.info(&quot;Save product&quot;);

    File file = new File(&quot;C:/LoadScenarios_Payload/RequestData&quot;+counter+&quot;.json&quot;);
    file.write(requestBody);
  
     vars.put(&quot;AddProductRequest&quot;,requestBody);
     vars.remove(&quot;UpdateItemPrice&quot;);
     vars.remove(&quot;UpdateItemPriceResponseData&quot;);
}



</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">AddProductResponseData</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.successonly">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <stringProp name="FileSaver.variablename">AddProductResponseData</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ChangePrice" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} ChangeItemPrice Seq1 ChangeQuotation" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${UpdateItemPrice}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/quotations/</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">30000</stringProp>
                </ConstantTimer>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="changeItem Preprocessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.services.FileServer
log.info(&quot;result&quot;);
def AddProductResponseData = new File(vars.get(&quot;AddProductResponseData&quot;)).getText();
def jsonSlurper = new JsonSlurper()
def object = jsonSlurper.parseText(vars.get(&quot;AddProductRequest&quot;))
def AddProductResponseObject=jsonSlurper.parseText(AddProductResponseData);
object.priceIsOutdated=false;
AddProductResponseObject.each { key, val -&gt;
    if(key != &quot;metaData&quot;) {
    	if(object.containsKey(key)) {
      	object[key] = val;
    		}  	
    	}
}
def counter=vars.get(&apos;Counter&apos;) as int;
def pricingCommandPayload= new File(&quot;C:/LoadScenarios_Payload/pricingCommand.json&quot;).getText();
def pricingCommandData=jsonSlurper.parseText(pricingCommandPayload);
object.lines[counter-1].pricingCommands.add(pricingCommandData);
def requestBody=new groovy.json.JsonBuilder(object).toPrettyString();
vars.put(&quot;UpdateItemPrice&quot;,requestBody);
vars.remove(&quot;AddProductRequest&quot;);
vars.remove(&quot;AddProductResponseData&quot;);</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">UpdateItemPriceResponseData</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.successonly">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <stringProp name="FileSaver.variablename">UpdateItemPriceResponseData</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} ChangeitemPrice Seq2 setRate" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${SetRatePayload}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/quotations/pricing/sparse/set-rate</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.services.FileServer
def payload = new File(&quot;C:/LoadScenarios_Payload/setRateRequestBody.json&quot;).getText();
def setRateLinePayload=new File(&quot;C:/LoadScenarios_Payload/SetRateLineData.json&quot;).getText();
def jsonSlurper = new JsonSlurper()
def object = jsonSlurper.parseText(payload)
def setRateLineDataObject=jsonSlurper.parseText(setRateLinePayload);
def counter=vars.get(&quot;Counter&quot;) as int;
List&lt;String&gt; lineIds = vars.getObject(&quot;LineIds&quot;);
for(int i=0;i&lt;counter;i++){
      def pricingCommandPayload= new File(&quot;C:/LoadScenarios_Payload/setRatePricingCommandData.json&quot;).getText();
      def pricingCommandData=jsonSlurper.parseText(pricingCommandPayload);
	 object.pricingDocument.linesEnvironments.add(setRateLineDataObject);
	 object.linesPricingCommands.add(pricingCommandData);
	 setRateLineDataObject.materialVariant.philipsLineId=lineIds[counter-1];
	 setRateLineDataObject.materialVariant.id=lineIds[counter-1];
}
object.pricingDocument.headerEnvironment.storageKeyInfo.documentId=vars.get(&quot;documentId&quot;) as String;
def requestBody=new groovy.json.JsonBuilder(object).toPrettyString();
vars.put(&quot;SetRatePayload&quot;,requestBody);
</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} ChangeItemPrice Seq3 UpdateQuotation" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${UpdateItemPrice}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/quotations/</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="UpdateItemPrice PreProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.services.FileServer
log.info(&quot;result&quot;);
def ChangeItemPriceResponseData = new File(vars.get(&quot;ChangeItemPriceResponseData&quot;)).getText();
def jsonSlurper = new JsonSlurper()
def object = jsonSlurper.parseText(vars.get(&quot;ChangeItemPrice&quot;))
def UpdateChangePriceItemResponseObject=jsonSlurper.parseText(ChangeItemPriceResponseData);
object.priceIsOutdated=true;
UpdateChangePriceItemResponseObject.each { key, val -&gt;
    if(key != &quot;metaData&quot;) {
    	if(object.containsKey(key)) {
      	object[key] = val;
    		}  	
    	}
}
def requestBody=new groovy.json.JsonBuilder(object).toPrettyString();
vars.put(&quot;UpdateItemPrice&quot;,requestBody);</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                  <stringProp name="FileSaver.filename">UpdateItemPriceResponseData</stringProp>
                  <boolProp name="FileSaver.errorsonly">false</boolProp>
                  <boolProp name="FileSaver.successonly">false</boolProp>
                  <boolProp name="FileSaver.skipsuffix">false</boolProp>
                  <boolProp name="FileSaver.skipautonumber">false</boolProp>
                  <stringProp name="FileSaver.variablename">UpdateItemPriceResponseData</stringProp>
                </ResultSaver>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="false"/>
              <hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
                  <intProp name="ActionProcessor.action">1</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">20000</stringProp>
                </TestAction>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                    <stringProp name="RandomTimer.range">100</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">10</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">Counter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
            </CounterConfig>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="false"/>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">30000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} ChangeItemPrice Seq4 QuoteQL" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;mutation ensurePricesUpdated($documentId:String!, $revision: Int!) {           quotes {             ensurePricesUpdated(documentVersion: {documentId: $documentId, revision: $revision}) {               version               pricingCommands {                 priceLineId                 rate               }               priceCalculation {   priceLines {     allowOverwrittenRate     calculationType     conditionPricingUnit     conditionUnitsText     conditionValue     currency     description     enabled     id     invalidMessage     isActive     isValid     rateUnit     type     isChangedManually     isSubTotal     rate     variantCondition     showRate     isExcluded   }   basePrice   invalidMessage   isValid   netValue   subTotal   taxValue   totalDiscount   totalPrice   unitBasePrice   isOutdated }             }           }         } &quot;,&quot;variables&quot;:{&quot;documentId&quot;:&quot;${documentId}&quot;,&quot;revision&quot;:0}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PrintQuote" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} PrintQuote Seq1 Approvals" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;query&quot;:&quot;{\n                approvals {\n                  get(documentVersion: {documentId: \&quot;${documentId}\&quot;, revision: 0}) {\n                    status\n                  }\n                }\n              }&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/QuoteQL</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">30000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} PrintQuote Seq2 getTemplates" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">SalesArea=NL01%2F05%2F01&amp;SalesDocumentType=ZQU&amp;PriceProcedure=ZBE03</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/ext/etoBooklet/getTemplates</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} PrintQuote" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="options" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">options</stringProp>
                </elementProp>
                <elementProp name="OPTA" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">OPTA</stringProp>
                </elementProp>
                <elementProp name="OPTB" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">OPTB</stringProp>
                </elementProp>
                <elementProp name="OPTC" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">OPTC</stringProp>
                </elementProp>
                <elementProp name="OPTD" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">OPTD</stringProp>
                </elementProp>
                <elementProp name="OPTE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">OPTE</stringProp>
                </elementProp>
                <elementProp name="BrutoPrice" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">BrutoPrice</stringProp>
                </elementProp>
                <elementProp name="HidePrices" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">HidePrices</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJBdXRvbWF0ZWRUZXN0cyIsImlzcyI6IkNvbmZpZ2l0IEpXVCIsImlhdCI6MTU3MjM2Mjc0NCwiZXhwIjoxNjY2OTcwNzQ0fQ.6nvX2xHnqjRfR2Fs-bQBFNDZPLhN8V4Qz7DJTnY98Xs</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">authorization</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/ext/etoBooklet/create/${documentId}/0/en-GB/ATO_2_COMM</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SapUpload" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UploadToSap getVersion" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="revision" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">revision</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/quotations/${documentId}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">version</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..version</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BackOfficePerson ${UserCounter} uploadToSap" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;documentId&quot;:&quot;${documentId}&quot;,&quot;revision&quot;:0,&quot;version&quot;:&quot;${version}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/quoteUpload/uploadToSap</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">30000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">120</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">UserCounter</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
